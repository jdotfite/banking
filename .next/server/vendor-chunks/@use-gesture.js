/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@use-gesture";
exports.ids = ["vendor-chunks/@use-gesture"];
exports.modules = {

/***/ "(ssr)/./node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.esm.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.esm.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigResolverMap: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   EngineMap: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.E),\n/* harmony export */   dragAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   hoverAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   moveAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   pinchAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   registerAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   scrollAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   wheelAction: () => (/* reexport safe */ _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.w)\n/* harmony export */ });\n/* harmony import */ var _dist_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/actions-fe213e88.esm.js */ \"(ssr)/./node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL2NvcmUvYWN0aW9ucy9kaXN0L3VzZS1nZXN0dXJlLWNvcmUtYWN0aW9ucy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUE0TjtBQUNsTCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1jcmVkaXQtY2FyZC1hcHAvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL2NvcmUvYWN0aW9ucy9kaXN0L3VzZS1nZXN0dXJlLWNvcmUtYWN0aW9ucy5lc20uanM/MDY4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBDIGFzIENvbmZpZ1Jlc29sdmVyTWFwLCBFIGFzIEVuZ2luZU1hcCwgZSBhcyBkcmFnQWN0aW9uLCBoIGFzIGhvdmVyQWN0aW9uLCBtIGFzIG1vdmVBY3Rpb24sIGYgYXMgcGluY2hBY3Rpb24sIHIgYXMgcmVnaXN0ZXJBY3Rpb24sIHMgYXMgc2Nyb2xsQWN0aW9uLCB3IGFzIHdoZWVsQWN0aW9uIH0gZnJvbSAnLi4vLi4vZGlzdC9hY3Rpb25zLWZlMjEzZTg4LmVzbS5qcyc7XG5pbXBvcnQgJy4uLy4uL2Rpc3QvbWF0aHMtMGFiMzlhZTkuZXNtLmpzJztcbiJdLCJuYW1lcyI6WyJDIiwiQ29uZmlnUmVzb2x2ZXJNYXAiLCJFIiwiRW5naW5lTWFwIiwiZSIsImRyYWdBY3Rpb24iLCJoIiwiaG92ZXJBY3Rpb24iLCJtIiwibW92ZUFjdGlvbiIsImYiLCJwaW5jaEFjdGlvbiIsInIiLCJyZWdpc3RlckFjdGlvbiIsInMiLCJzY3JvbGxBY3Rpb24iLCJ3Iiwid2hlZWxBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ ConfigResolverMap),\n/* harmony export */   E: () => (/* binding */ EngineMap),\n/* harmony export */   S: () => (/* binding */ SUPPORT),\n/* harmony export */   _: () => (/* binding */ _objectSpread2),\n/* harmony export */   a: () => (/* binding */ _defineProperty),\n/* harmony export */   b: () => (/* binding */ touchIds),\n/* harmony export */   c: () => (/* binding */ chain),\n/* harmony export */   d: () => (/* binding */ toHandlerProp),\n/* harmony export */   e: () => (/* binding */ dragAction),\n/* harmony export */   f: () => (/* binding */ pinchAction),\n/* harmony export */   h: () => (/* binding */ hoverAction),\n/* harmony export */   i: () => (/* binding */ isTouch),\n/* harmony export */   m: () => (/* binding */ moveAction),\n/* harmony export */   p: () => (/* binding */ parseProp),\n/* harmony export */   r: () => (/* binding */ registerAction),\n/* harmony export */   s: () => (/* binding */ scrollAction),\n/* harmony export */   t: () => (/* binding */ toDomEventType),\n/* harmony export */   w: () => (/* binding */ wheelAction)\n/* harmony export */ });\n/* harmony import */ var _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./maths-0ab39ae9.esm.js */ \"(ssr)/./node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js\");\n\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread2(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nconst EVENT_TYPE_MAP = {\n    pointer: {\n        start: \"down\",\n        change: \"move\",\n        end: \"up\"\n    },\n    mouse: {\n        start: \"down\",\n        change: \"move\",\n        end: \"up\"\n    },\n    touch: {\n        start: \"start\",\n        change: \"move\",\n        end: \"end\"\n    },\n    gesture: {\n        start: \"start\",\n        change: \"change\",\n        end: \"end\"\n    }\n};\nfunction capitalize(string) {\n    if (!string) return \"\";\n    return string[0].toUpperCase() + string.slice(1);\n}\nconst actionsWithoutCaptureSupported = [\n    \"enter\",\n    \"leave\"\n];\nfunction hasCapture(capture = false, actionKey) {\n    return capture && !actionsWithoutCaptureSupported.includes(actionKey);\n}\nfunction toHandlerProp(device, action = \"\", capture = false) {\n    const deviceProps = EVENT_TYPE_MAP[device];\n    const actionKey = deviceProps ? deviceProps[action] || action : action;\n    return \"on\" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? \"Capture\" : \"\");\n}\nconst pointerCaptureEvents = [\n    \"gotpointercapture\",\n    \"lostpointercapture\"\n];\nfunction parseProp(prop) {\n    let eventKey = prop.substring(2).toLowerCase();\n    const passive = !!~eventKey.indexOf(\"passive\");\n    if (passive) eventKey = eventKey.replace(\"passive\", \"\");\n    const captureKey = pointerCaptureEvents.includes(eventKey) ? \"capturecapture\" : \"capture\";\n    const capture = !!~eventKey.indexOf(captureKey);\n    if (capture) eventKey = eventKey.replace(\"capture\", \"\");\n    return {\n        device: eventKey,\n        capture,\n        passive\n    };\n}\nfunction toDomEventType(device, action = \"\") {\n    const deviceProps = EVENT_TYPE_MAP[device];\n    const actionKey = deviceProps ? deviceProps[action] || action : action;\n    return device + actionKey;\n}\nfunction isTouch(event) {\n    return \"touches\" in event;\n}\nfunction getPointerType(event) {\n    if (isTouch(event)) return \"touch\";\n    if (\"pointerType\" in event) return event.pointerType;\n    return \"mouse\";\n}\nfunction getCurrentTargetTouchList(event) {\n    return Array.from(event.touches).filter((e)=>{\n        var _event$currentTarget, _event$currentTarget$;\n        return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));\n    });\n}\nfunction getTouchList(event) {\n    return event.type === \"touchend\" || event.type === \"touchcancel\" ? event.changedTouches : event.targetTouches;\n}\nfunction getValueEvent(event) {\n    return isTouch(event) ? getTouchList(event)[0] : event;\n}\nfunction distanceAngle(P1, P2) {\n    try {\n        const dx = P2.clientX - P1.clientX;\n        const dy = P2.clientY - P1.clientY;\n        const cx = (P2.clientX + P1.clientX) / 2;\n        const cy = (P2.clientY + P1.clientY) / 2;\n        const distance = Math.hypot(dx, dy);\n        const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;\n        const origin = [\n            cx,\n            cy\n        ];\n        return {\n            angle,\n            distance,\n            origin\n        };\n    } catch (_unused) {}\n    return null;\n}\nfunction touchIds(event) {\n    return getCurrentTargetTouchList(event).map((touch)=>touch.identifier);\n}\nfunction touchDistanceAngle(event, ids) {\n    const [P1, P2] = Array.from(event.touches).filter((touch)=>ids.includes(touch.identifier));\n    return distanceAngle(P1, P2);\n}\nfunction pointerId(event) {\n    const valueEvent = getValueEvent(event);\n    return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;\n}\nfunction pointerValues(event) {\n    const valueEvent = getValueEvent(event);\n    return [\n        valueEvent.clientX,\n        valueEvent.clientY\n    ];\n}\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\nfunction wheelValues(event) {\n    let { deltaX, deltaY, deltaMode } = event;\n    if (deltaMode === 1) {\n        deltaX *= LINE_HEIGHT;\n        deltaY *= LINE_HEIGHT;\n    } else if (deltaMode === 2) {\n        deltaX *= PAGE_HEIGHT;\n        deltaY *= PAGE_HEIGHT;\n    }\n    return [\n        deltaX,\n        deltaY\n    ];\n}\nfunction scrollValues(event) {\n    var _ref, _ref2;\n    const { scrollX, scrollY, scrollLeft, scrollTop } = event.currentTarget;\n    return [\n        (_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0,\n        (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0\n    ];\n}\nfunction getEventDetails(event) {\n    const payload = {};\n    if (\"buttons\" in event) payload.buttons = event.buttons;\n    if (\"shiftKey\" in event) {\n        const { shiftKey, altKey, metaKey, ctrlKey } = event;\n        Object.assign(payload, {\n            shiftKey,\n            altKey,\n            metaKey,\n            ctrlKey\n        });\n    }\n    return payload;\n}\nfunction call(v, ...args) {\n    if (typeof v === \"function\") {\n        return v(...args);\n    } else {\n        return v;\n    }\n}\nfunction noop() {}\nfunction chain(...fns) {\n    if (fns.length === 0) return noop;\n    if (fns.length === 1) return fns[0];\n    return function() {\n        let result;\n        for (const fn of fns){\n            result = fn.apply(this, arguments) || result;\n        }\n        return result;\n    };\n}\nfunction assignDefault(value, fallback) {\n    return Object.assign({}, fallback, value || {});\n}\nconst BEFORE_LAST_KINEMATICS_DELAY = 32;\nclass Engine {\n    constructor(ctrl, args, key){\n        this.ctrl = ctrl;\n        this.args = args;\n        this.key = key;\n        if (!this.state) {\n            this.state = {};\n            this.computeValues([\n                0,\n                0\n            ]);\n            this.computeInitial();\n            if (this.init) this.init();\n            this.reset();\n        }\n    }\n    get state() {\n        return this.ctrl.state[this.key];\n    }\n    set state(state) {\n        this.ctrl.state[this.key] = state;\n    }\n    get shared() {\n        return this.ctrl.state.shared;\n    }\n    get eventStore() {\n        return this.ctrl.gestureEventStores[this.key];\n    }\n    get timeoutStore() {\n        return this.ctrl.gestureTimeoutStores[this.key];\n    }\n    get config() {\n        return this.ctrl.config[this.key];\n    }\n    get sharedConfig() {\n        return this.ctrl.config.shared;\n    }\n    get handler() {\n        return this.ctrl.handlers[this.key];\n    }\n    reset() {\n        const { state, shared, ingKey, args } = this;\n        shared[ingKey] = state._active = state.active = state._blocked = state._force = false;\n        state._step = [\n            false,\n            false\n        ];\n        state.intentional = false;\n        state._movement = [\n            0,\n            0\n        ];\n        state._distance = [\n            0,\n            0\n        ];\n        state._direction = [\n            0,\n            0\n        ];\n        state._delta = [\n            0,\n            0\n        ];\n        state._bounds = [\n            [\n                -Infinity,\n                Infinity\n            ],\n            [\n                -Infinity,\n                Infinity\n            ]\n        ];\n        state.args = args;\n        state.axis = undefined;\n        state.memo = undefined;\n        state.elapsedTime = state.timeDelta = 0;\n        state.direction = [\n            0,\n            0\n        ];\n        state.distance = [\n            0,\n            0\n        ];\n        state.overflow = [\n            0,\n            0\n        ];\n        state._movementBound = [\n            false,\n            false\n        ];\n        state.velocity = [\n            0,\n            0\n        ];\n        state.movement = [\n            0,\n            0\n        ];\n        state.delta = [\n            0,\n            0\n        ];\n        state.timeStamp = 0;\n    }\n    start(event) {\n        const state = this.state;\n        const config = this.config;\n        if (!state._active) {\n            this.reset();\n            this.computeInitial();\n            state._active = true;\n            state.target = event.target;\n            state.currentTarget = event.currentTarget;\n            state.lastOffset = config.from ? call(config.from, state) : state.offset;\n            state.offset = state.lastOffset;\n            state.startTime = state.timeStamp = event.timeStamp;\n        }\n    }\n    computeValues(values) {\n        const state = this.state;\n        state._values = values;\n        state.values = this.config.transform(values);\n    }\n    computeInitial() {\n        const state = this.state;\n        state._initial = state._values;\n        state.initial = state.values;\n    }\n    compute(event) {\n        const { state, config, shared } = this;\n        state.args = this.args;\n        let dt = 0;\n        if (event) {\n            state.event = event;\n            if (config.preventDefault && event.cancelable) state.event.preventDefault();\n            state.type = event.type;\n            shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;\n            shared.locked = !!document.pointerLockElement;\n            Object.assign(shared, getEventDetails(event));\n            shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;\n            dt = event.timeStamp - state.timeStamp;\n            state.timeStamp = event.timeStamp;\n            state.elapsedTime = state.timeStamp - state.startTime;\n        }\n        if (state._active) {\n            const _absoluteDelta = state._delta.map(Math.abs);\n            _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._distance, _absoluteDelta);\n        }\n        if (this.axisIntent) this.axisIntent(event);\n        const [_m0, _m1] = state._movement;\n        const [t0, t1] = config.threshold;\n        const { _step, values } = state;\n        if (config.hasCustomTransform) {\n            if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && values[0];\n            if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && values[1];\n        } else {\n            if (_step[0] === false) _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;\n            if (_step[1] === false) _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;\n        }\n        state.intentional = _step[0] !== false || _step[1] !== false;\n        if (!state.intentional) return;\n        const movement = [\n            0,\n            0\n        ];\n        if (config.hasCustomTransform) {\n            const [v0, v1] = values;\n            movement[0] = _step[0] !== false ? v0 - _step[0] : 0;\n            movement[1] = _step[1] !== false ? v1 - _step[1] : 0;\n        } else {\n            movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;\n            movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;\n        }\n        if (this.restrictToAxis && !state._blocked) this.restrictToAxis(movement);\n        const previousOffset = state.offset;\n        const gestureIsActive = state._active && !state._blocked || state.active;\n        if (gestureIsActive) {\n            state.first = state._active && !state.active;\n            state.last = !state._active && state.active;\n            state.active = shared[this.ingKey] = state._active;\n            if (event) {\n                if (state.first) {\n                    if (\"bounds\" in config) state._bounds = call(config.bounds, state);\n                    if (this.setup) this.setup();\n                }\n                state.movement = movement;\n                this.computeOffset();\n            }\n        }\n        const [ox, oy] = state.offset;\n        const [[x0, x1], [y0, y1]] = state._bounds;\n        state.overflow = [\n            ox < x0 ? -1 : ox > x1 ? 1 : 0,\n            oy < y0 ? -1 : oy > y1 ? 1 : 0\n        ];\n        state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;\n        state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;\n        const rubberband = state._active ? config.rubberband || [\n            0,\n            0\n        ] : [\n            0,\n            0\n        ];\n        state.offset = (0,_maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(state._bounds, state.offset, rubberband);\n        state.delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(state.offset, previousOffset);\n        this.computeMovement();\n        if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {\n            state.delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(state.offset, previousOffset);\n            const absoluteDelta = state.delta.map(Math.abs);\n            _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state.distance, absoluteDelta);\n            state.direction = state.delta.map(Math.sign);\n            state._direction = state._delta.map(Math.sign);\n            if (!state.first && dt > 0) {\n                state.velocity = [\n                    absoluteDelta[0] / dt,\n                    absoluteDelta[1] / dt\n                ];\n                state.timeDelta = dt;\n            }\n        }\n    }\n    emit() {\n        const state = this.state;\n        const shared = this.shared;\n        const config = this.config;\n        if (!state._active) this.clean();\n        if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents) return;\n        const memo = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {\n            [this.aliasKey]: state.values\n        }));\n        if (memo !== undefined) state.memo = memo;\n    }\n    clean() {\n        this.eventStore.clean();\n        this.timeoutStore.clean();\n    }\n}\nfunction selectAxis([dx, dy], threshold) {\n    const absDx = Math.abs(dx);\n    const absDy = Math.abs(dy);\n    if (absDx > absDy && absDx > threshold) {\n        return \"x\";\n    }\n    if (absDy > absDx && absDy > threshold) {\n        return \"y\";\n    }\n    return undefined;\n}\nclass CoordinatesEngine extends Engine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"aliasKey\", \"xy\");\n    }\n    reset() {\n        super.reset();\n        this.state.axis = undefined;\n    }\n    init() {\n        this.state.offset = [\n            0,\n            0\n        ];\n        this.state.lastOffset = [\n            0,\n            0\n        ];\n    }\n    computeOffset() {\n        this.state.offset = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.add(this.state.lastOffset, this.state.movement);\n    }\n    computeMovement() {\n        this.state.movement = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(this.state.offset, this.state.lastOffset);\n    }\n    axisIntent(event) {\n        const state = this.state;\n        const config = this.config;\n        if (!state.axis && event) {\n            const threshold = typeof config.axisThreshold === \"object\" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;\n            state.axis = selectAxis(state._movement, threshold);\n        }\n        state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;\n    }\n    restrictToAxis(v) {\n        if (this.config.axis || this.config.lockDirection) {\n            switch(this.state.axis){\n                case \"x\":\n                    v[1] = 0;\n                    break;\n                case \"y\":\n                    v[0] = 0;\n                    break;\n            }\n        }\n    }\n}\nconst identity = (v)=>v;\nconst DEFAULT_RUBBERBAND = 0.15;\nconst commonConfigResolver = {\n    enabled (value = true) {\n        return value;\n    },\n    eventOptions (value, _k, config) {\n        return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);\n    },\n    preventDefault (value = false) {\n        return value;\n    },\n    triggerAllEvents (value = false) {\n        return value;\n    },\n    rubberband (value = 0) {\n        switch(value){\n            case true:\n                return [\n                    DEFAULT_RUBBERBAND,\n                    DEFAULT_RUBBERBAND\n                ];\n            case false:\n                return [\n                    0,\n                    0\n                ];\n            default:\n                return _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(value);\n        }\n    },\n    from (value) {\n        if (typeof value === \"function\") return value;\n        if (value != null) return _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(value);\n    },\n    transform (value, _k, config) {\n        const transform = value || config.shared.transform;\n        this.hasCustomTransform = !!transform;\n        if (true) {\n            const originalTransform = transform || identity;\n            return (v)=>{\n                const r = originalTransform(v);\n                if (!isFinite(r[0]) || !isFinite(r[1])) {\n                    console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r[0]},${[\n                        1\n                    ]}]`);\n                }\n                return r;\n            };\n        }\n        return transform || identity;\n    },\n    threshold (value) {\n        return _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(value, 0);\n    }\n};\nif (true) {\n    Object.assign(commonConfigResolver, {\n        domTarget (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`domTarget\\` option has been renamed to \\`target\\`.`);\n            }\n            return NaN;\n        },\n        lockDirection (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`lockDirection\\` option has been merged with \\`axis\\`. Use it as in \\`{ axis: 'lock' }\\``);\n            }\n            return NaN;\n        },\n        initial (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`initial\\` option has been renamed to \\`from\\`.`);\n            }\n            return NaN;\n        }\n    });\n}\nconst DEFAULT_AXIS_THRESHOLD = 0;\nconst coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {\n    axis (_v, _k, { axis }) {\n        this.lockDirection = axis === \"lock\";\n        if (!this.lockDirection) return axis;\n    },\n    axisThreshold (value = DEFAULT_AXIS_THRESHOLD) {\n        return value;\n    },\n    bounds (value = {}) {\n        if (typeof value === \"function\") {\n            return (state)=>coordinatesConfigResolver.bounds(value(state));\n        }\n        if (\"current\" in value) {\n            return ()=>value.current;\n        }\n        if (typeof HTMLElement === \"function\" && value instanceof HTMLElement) {\n            return value;\n        }\n        const { left = -Infinity, right = Infinity, top = -Infinity, bottom = Infinity } = value;\n        return [\n            [\n                left,\n                right\n            ],\n            [\n                top,\n                bottom\n            ]\n        ];\n    }\n});\nconst KEYS_DELTA_MAP = {\n    ArrowRight: (displacement, factor = 1)=>[\n            displacement * factor,\n            0\n        ],\n    ArrowLeft: (displacement, factor = 1)=>[\n            -1 * displacement * factor,\n            0\n        ],\n    ArrowUp: (displacement, factor = 1)=>[\n            0,\n            -1 * displacement * factor\n        ],\n    ArrowDown: (displacement, factor = 1)=>[\n            0,\n            displacement * factor\n        ]\n};\nclass DragEngine extends CoordinatesEngine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"ingKey\", \"dragging\");\n    }\n    reset() {\n        super.reset();\n        const state = this.state;\n        state._pointerId = undefined;\n        state._pointerActive = false;\n        state._keyboardActive = false;\n        state._preventScroll = false;\n        state._delayed = false;\n        state.swipe = [\n            0,\n            0\n        ];\n        state.tap = false;\n        state.canceled = false;\n        state.cancel = this.cancel.bind(this);\n    }\n    setup() {\n        const state = this.state;\n        if (state._bounds instanceof HTMLElement) {\n            const boundRect = state._bounds.getBoundingClientRect();\n            const targetRect = state.currentTarget.getBoundingClientRect();\n            const _bounds = {\n                left: boundRect.left - targetRect.left + state.offset[0],\n                right: boundRect.right - targetRect.right + state.offset[0],\n                top: boundRect.top - targetRect.top + state.offset[1],\n                bottom: boundRect.bottom - targetRect.bottom + state.offset[1]\n            };\n            state._bounds = coordinatesConfigResolver.bounds(_bounds);\n        }\n    }\n    cancel() {\n        const state = this.state;\n        if (state.canceled) return;\n        state.canceled = true;\n        state._active = false;\n        setTimeout(()=>{\n            this.compute();\n            this.emit();\n        }, 0);\n    }\n    setActive() {\n        this.state._active = this.state._pointerActive || this.state._keyboardActive;\n    }\n    clean() {\n        this.pointerClean();\n        this.state._pointerActive = false;\n        this.state._keyboardActive = false;\n        super.clean();\n    }\n    pointerDown(event) {\n        const config = this.config;\n        const state = this.state;\n        if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons)) return;\n        const ctrlIds = this.ctrl.setEventIds(event);\n        if (config.pointerCapture) {\n            event.target.setPointerCapture(event.pointerId);\n        }\n        if (ctrlIds && ctrlIds.size > 1 && state._pointerActive) return;\n        this.start(event);\n        this.setupPointer(event);\n        state._pointerId = pointerId(event);\n        state._pointerActive = true;\n        this.computeValues(pointerValues(event));\n        this.computeInitial();\n        if (config.preventScrollAxis && getPointerType(event) !== \"mouse\") {\n            state._active = false;\n            this.setupScrollPrevention(event);\n        } else if (config.delay > 0) {\n            this.setupDelayTrigger(event);\n            if (config.triggerAllEvents) {\n                this.compute(event);\n                this.emit();\n            }\n        } else {\n            this.startPointerDrag(event);\n        }\n    }\n    startPointerDrag(event) {\n        const state = this.state;\n        state._active = true;\n        state._preventScroll = true;\n        state._delayed = false;\n        this.compute(event);\n        this.emit();\n    }\n    pointerMove(event) {\n        const state = this.state;\n        const config = this.config;\n        if (!state._pointerActive) return;\n        const id = pointerId(event);\n        if (state._pointerId !== undefined && id !== state._pointerId) return;\n        const _values = pointerValues(event);\n        if (document.pointerLockElement === event.target) {\n            state._delta = [\n                event.movementX,\n                event.movementY\n            ];\n        } else {\n            state._delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(_values, state._values);\n            this.computeValues(_values);\n        }\n        _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._movement, state._delta);\n        this.compute(event);\n        if (state._delayed && state.intentional) {\n            this.timeoutStore.remove(\"dragDelay\");\n            state.active = false;\n            this.startPointerDrag(event);\n            return;\n        }\n        if (config.preventScrollAxis && !state._preventScroll) {\n            if (state.axis) {\n                if (state.axis === config.preventScrollAxis || config.preventScrollAxis === \"xy\") {\n                    state._active = false;\n                    this.clean();\n                    return;\n                } else {\n                    this.timeoutStore.remove(\"startPointerDrag\");\n                    this.startPointerDrag(event);\n                    return;\n                }\n            } else {\n                return;\n            }\n        }\n        this.emit();\n    }\n    pointerUp(event) {\n        this.ctrl.setEventIds(event);\n        try {\n            if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {\n                ;\n                event.target.releasePointerCapture(event.pointerId);\n            }\n        } catch (_unused) {\n            if (true) {\n                console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \\`@react-three/fiber\\`. \\n\\nPlease upgrade to the latest version.`);\n            }\n        }\n        const state = this.state;\n        const config = this.config;\n        if (!state._active || !state._pointerActive) return;\n        const id = pointerId(event);\n        if (state._pointerId !== undefined && id !== state._pointerId) return;\n        this.state._pointerActive = false;\n        this.setActive();\n        this.compute(event);\n        const [dx, dy] = state._distance;\n        state.tap = dx <= config.tapsThreshold && dy <= config.tapsThreshold;\n        if (state.tap && config.filterTaps) {\n            state._force = true;\n        } else {\n            const [_dx, _dy] = state._delta;\n            const [_mx, _my] = state._movement;\n            const [svx, svy] = config.swipe.velocity;\n            const [sx, sy] = config.swipe.distance;\n            const sdt = config.swipe.duration;\n            if (state.elapsedTime < sdt) {\n                const _vx = Math.abs(_dx / state.timeDelta);\n                const _vy = Math.abs(_dy / state.timeDelta);\n                if (_vx > svx && Math.abs(_mx) > sx) state.swipe[0] = Math.sign(_dx);\n                if (_vy > svy && Math.abs(_my) > sy) state.swipe[1] = Math.sign(_dy);\n            }\n        }\n        this.emit();\n    }\n    pointerClick(event) {\n        if (!this.state.tap && event.detail > 0) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    setupPointer(event) {\n        const config = this.config;\n        const device = config.device;\n        if (true) {\n            try {\n                if (device === \"pointer\" && config.preventScrollDelay === undefined) {\n                    const currentTarget = \"uv\" in event ? event.sourceEvent.currentTarget : event.currentTarget;\n                    const style = window.getComputedStyle(currentTarget);\n                    if (style.touchAction === \"auto\") {\n                        console.warn(`[@use-gesture]: The drag target has its \\`touch-action\\` style property set to \\`auto\\`. It is recommended to add \\`touch-action: 'none'\\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.\\n\\nThis message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);\n                    }\n                }\n            } catch (_unused2) {}\n        }\n        if (config.pointerLock) {\n            event.currentTarget.requestPointerLock();\n        }\n        if (!config.pointerCapture) {\n            this.eventStore.add(this.sharedConfig.window, device, \"change\", this.pointerMove.bind(this));\n            this.eventStore.add(this.sharedConfig.window, device, \"end\", this.pointerUp.bind(this));\n            this.eventStore.add(this.sharedConfig.window, device, \"cancel\", this.pointerUp.bind(this));\n        }\n    }\n    pointerClean() {\n        if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {\n            document.exitPointerLock();\n        }\n    }\n    preventScroll(event) {\n        if (this.state._preventScroll && event.cancelable) {\n            event.preventDefault();\n        }\n    }\n    setupScrollPrevention(event) {\n        this.state._preventScroll = false;\n        persistEvent(event);\n        const remove = this.eventStore.add(this.sharedConfig.window, \"touch\", \"change\", this.preventScroll.bind(this), {\n            passive: false\n        });\n        this.eventStore.add(this.sharedConfig.window, \"touch\", \"end\", remove);\n        this.eventStore.add(this.sharedConfig.window, \"touch\", \"cancel\", remove);\n        this.timeoutStore.add(\"startPointerDrag\", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);\n    }\n    setupDelayTrigger(event) {\n        this.state._delayed = true;\n        this.timeoutStore.add(\"dragDelay\", ()=>{\n            this.state._step = [\n                0,\n                0\n            ];\n            this.startPointerDrag(event);\n        }, this.config.delay);\n    }\n    keyDown(event) {\n        const deltaFn = KEYS_DELTA_MAP[event.key];\n        if (deltaFn) {\n            const state = this.state;\n            const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;\n            this.start(event);\n            state._delta = deltaFn(this.config.keyboardDisplacement, factor);\n            state._keyboardActive = true;\n            _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._movement, state._delta);\n            this.compute(event);\n            this.emit();\n        }\n    }\n    keyUp(event) {\n        if (!(event.key in KEYS_DELTA_MAP)) return;\n        this.state._keyboardActive = false;\n        this.setActive();\n        this.compute(event);\n        this.emit();\n    }\n    bind(bindFunction) {\n        const device = this.config.device;\n        bindFunction(device, \"start\", this.pointerDown.bind(this));\n        if (this.config.pointerCapture) {\n            bindFunction(device, \"change\", this.pointerMove.bind(this));\n            bindFunction(device, \"end\", this.pointerUp.bind(this));\n            bindFunction(device, \"cancel\", this.pointerUp.bind(this));\n            bindFunction(\"lostPointerCapture\", \"\", this.pointerUp.bind(this));\n        }\n        if (this.config.keys) {\n            bindFunction(\"key\", \"down\", this.keyDown.bind(this));\n            bindFunction(\"key\", \"up\", this.keyUp.bind(this));\n        }\n        if (this.config.filterTaps) {\n            bindFunction(\"click\", \"\", this.pointerClick.bind(this), {\n                capture: true,\n                passive: false\n            });\n        }\n    }\n}\nfunction persistEvent(event) {\n    \"persist\" in event && typeof event.persist === \"function\" && event.persist();\n}\nconst isBrowser =  false && 0;\nfunction supportsTouchEvents() {\n    return isBrowser && \"ontouchstart\" in window;\n}\nfunction isTouchScreen() {\n    return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;\n}\nfunction supportsPointerEvents() {\n    return isBrowser && \"onpointerdown\" in window;\n}\nfunction supportsPointerLock() {\n    return isBrowser && \"exitPointerLock\" in window.document;\n}\nfunction supportsGestureEvents() {\n    try {\n        return \"constructor\" in GestureEvent;\n    } catch (e) {\n        return false;\n    }\n}\nconst SUPPORT = {\n    isBrowser,\n    gesture: supportsGestureEvents(),\n    touch: supportsTouchEvents(),\n    touchscreen: isTouchScreen(),\n    pointer: supportsPointerEvents(),\n    pointerLock: supportsPointerLock()\n};\nconst DEFAULT_PREVENT_SCROLL_DELAY = 250;\nconst DEFAULT_DRAG_DELAY = 180;\nconst DEFAULT_SWIPE_VELOCITY = 0.5;\nconst DEFAULT_SWIPE_DISTANCE = 50;\nconst DEFAULT_SWIPE_DURATION = 250;\nconst DEFAULT_KEYBOARD_DISPLACEMENT = 10;\nconst DEFAULT_DRAG_AXIS_THRESHOLD = {\n    mouse: 0,\n    touch: 0,\n    pen: 8\n};\nconst dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n    device (_v, _k, { pointer: { touch = false, lock = false, mouse = false } = {} }) {\n        this.pointerLock = lock && SUPPORT.pointerLock;\n        if (SUPPORT.touch && touch) return \"touch\";\n        if (this.pointerLock) return \"mouse\";\n        if (SUPPORT.pointer && !mouse) return \"pointer\";\n        if (SUPPORT.touch) return \"touch\";\n        return \"mouse\";\n    },\n    preventScrollAxis (value, _k, { preventScroll }) {\n        this.preventScrollDelay = typeof preventScroll === \"number\" ? preventScroll : preventScroll || preventScroll === undefined && value ? DEFAULT_PREVENT_SCROLL_DELAY : undefined;\n        if (!SUPPORT.touchscreen || preventScroll === false) return undefined;\n        return value ? value : preventScroll !== undefined ? \"y\" : undefined;\n    },\n    pointerCapture (_v, _k, { pointer: { capture = true, buttons = 1, keys = true } = {} }) {\n        this.pointerButtons = buttons;\n        this.keys = keys;\n        return !this.pointerLock && this.device === \"pointer\" && capture;\n    },\n    threshold (value, _k, { filterTaps = false, tapsThreshold = 3, axis = undefined }) {\n        const threshold = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);\n        this.filterTaps = filterTaps;\n        this.tapsThreshold = tapsThreshold;\n        return threshold;\n    },\n    swipe ({ velocity = DEFAULT_SWIPE_VELOCITY, distance = DEFAULT_SWIPE_DISTANCE, duration = DEFAULT_SWIPE_DURATION } = {}) {\n        return {\n            velocity: this.transform(_maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(velocity)),\n            distance: this.transform(_maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(distance)),\n            duration\n        };\n    },\n    delay (value = 0) {\n        switch(value){\n            case true:\n                return DEFAULT_DRAG_DELAY;\n            case false:\n                return 0;\n            default:\n                return value;\n        }\n    },\n    axisThreshold (value) {\n        if (!value) return DEFAULT_DRAG_AXIS_THRESHOLD;\n        return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);\n    },\n    keyboardDisplacement (value = DEFAULT_KEYBOARD_DISPLACEMENT) {\n        return value;\n    }\n});\nif (true) {\n    Object.assign(dragConfigResolver, {\n        useTouch (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`useTouch\\` option has been renamed to \\`pointer.touch\\`. Use it as in \\`{ pointer: { touch: true } }\\`.`);\n            }\n            return NaN;\n        },\n        experimental_preventWindowScrollY (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`experimental_preventWindowScrollY\\` option has been renamed to \\`preventScroll\\`.`);\n            }\n            return NaN;\n        },\n        swipeVelocity (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`swipeVelocity\\` option has been renamed to \\`swipe.velocity\\`. Use it as in \\`{ swipe: { velocity: 0.5 } }\\`.`);\n            }\n            return NaN;\n        },\n        swipeDistance (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`swipeDistance\\` option has been renamed to \\`swipe.distance\\`. Use it as in \\`{ swipe: { distance: 50 } }\\`.`);\n            }\n            return NaN;\n        },\n        swipeDuration (value) {\n            if (value !== undefined) {\n                throw Error(`[@use-gesture]: \\`swipeDuration\\` option has been renamed to \\`swipe.duration\\`. Use it as in \\`{ swipe: { duration: 250 } }\\`.`);\n            }\n            return NaN;\n        }\n    });\n}\nfunction clampStateInternalMovementToBounds(state) {\n    const [ox, oy] = state.overflow;\n    const [dx, dy] = state._delta;\n    const [dirx, diry] = state._direction;\n    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {\n        state._movement[0] = state._movementBound[0];\n    }\n    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {\n        state._movement[1] = state._movementBound[1];\n    }\n}\nconst SCALE_ANGLE_RATIO_INTENT_DEG = 30;\nconst PINCH_WHEEL_RATIO = 100;\nclass PinchEngine extends Engine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"ingKey\", \"pinching\");\n        _defineProperty(this, \"aliasKey\", \"da\");\n    }\n    init() {\n        this.state.offset = [\n            1,\n            0\n        ];\n        this.state.lastOffset = [\n            1,\n            0\n        ];\n        this.state._pointerEvents = new Map();\n    }\n    reset() {\n        super.reset();\n        const state = this.state;\n        state._touchIds = [];\n        state.canceled = false;\n        state.cancel = this.cancel.bind(this);\n        state.turns = 0;\n    }\n    computeOffset() {\n        const { type, movement, lastOffset } = this.state;\n        if (type === \"wheel\") {\n            this.state.offset = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.add(movement, lastOffset);\n        } else {\n            this.state.offset = [\n                (1 + movement[0]) * lastOffset[0],\n                movement[1] + lastOffset[1]\n            ];\n        }\n    }\n    computeMovement() {\n        const { offset, lastOffset } = this.state;\n        this.state.movement = [\n            offset[0] / lastOffset[0],\n            offset[1] - lastOffset[1]\n        ];\n    }\n    axisIntent() {\n        const state = this.state;\n        const [_m0, _m1] = state._movement;\n        if (!state.axis) {\n            const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);\n            if (axisMovementDifference < 0) state.axis = \"angle\";\n            else if (axisMovementDifference > 0) state.axis = \"scale\";\n        }\n    }\n    restrictToAxis(v) {\n        if (this.config.lockDirection) {\n            if (this.state.axis === \"scale\") v[1] = 0;\n            else if (this.state.axis === \"angle\") v[0] = 0;\n        }\n    }\n    cancel() {\n        const state = this.state;\n        if (state.canceled) return;\n        setTimeout(()=>{\n            state.canceled = true;\n            state._active = false;\n            this.compute();\n            this.emit();\n        }, 0);\n    }\n    touchStart(event) {\n        this.ctrl.setEventIds(event);\n        const state = this.state;\n        const ctrlTouchIds = this.ctrl.touchIds;\n        if (state._active) {\n            if (state._touchIds.every((id)=>ctrlTouchIds.has(id))) return;\n        }\n        if (ctrlTouchIds.size < 2) return;\n        this.start(event);\n        state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);\n        const payload = touchDistanceAngle(event, state._touchIds);\n        if (!payload) return;\n        this.pinchStart(event, payload);\n    }\n    pointerStart(event) {\n        if (event.buttons != null && event.buttons % 2 !== 1) return;\n        this.ctrl.setEventIds(event);\n        event.target.setPointerCapture(event.pointerId);\n        const state = this.state;\n        const _pointerEvents = state._pointerEvents;\n        const ctrlPointerIds = this.ctrl.pointerIds;\n        if (state._active) {\n            if (Array.from(_pointerEvents.keys()).every((id)=>ctrlPointerIds.has(id))) return;\n        }\n        if (_pointerEvents.size < 2) {\n            _pointerEvents.set(event.pointerId, event);\n        }\n        if (state._pointerEvents.size < 2) return;\n        this.start(event);\n        const payload = distanceAngle(...Array.from(_pointerEvents.values()));\n        if (!payload) return;\n        this.pinchStart(event, payload);\n    }\n    pinchStart(event, payload) {\n        const state = this.state;\n        state.origin = payload.origin;\n        this.computeValues([\n            payload.distance,\n            payload.angle\n        ]);\n        this.computeInitial();\n        this.compute(event);\n        this.emit();\n    }\n    touchMove(event) {\n        if (!this.state._active) return;\n        const payload = touchDistanceAngle(event, this.state._touchIds);\n        if (!payload) return;\n        this.pinchMove(event, payload);\n    }\n    pointerMove(event) {\n        const _pointerEvents = this.state._pointerEvents;\n        if (_pointerEvents.has(event.pointerId)) {\n            _pointerEvents.set(event.pointerId, event);\n        }\n        if (!this.state._active) return;\n        const payload = distanceAngle(...Array.from(_pointerEvents.values()));\n        if (!payload) return;\n        this.pinchMove(event, payload);\n    }\n    pinchMove(event, payload) {\n        const state = this.state;\n        const prev_a = state._values[1];\n        const delta_a = payload.angle - prev_a;\n        let delta_turns = 0;\n        if (Math.abs(delta_a) > 270) delta_turns += Math.sign(delta_a);\n        this.computeValues([\n            payload.distance,\n            payload.angle - 360 * delta_turns\n        ]);\n        state.origin = payload.origin;\n        state.turns = delta_turns;\n        state._movement = [\n            state._values[0] / state._initial[0] - 1,\n            state._values[1] - state._initial[1]\n        ];\n        this.compute(event);\n        this.emit();\n    }\n    touchEnd(event) {\n        this.ctrl.setEventIds(event);\n        if (!this.state._active) return;\n        if (this.state._touchIds.some((id)=>!this.ctrl.touchIds.has(id))) {\n            this.state._active = false;\n            this.compute(event);\n            this.emit();\n        }\n    }\n    pointerEnd(event) {\n        const state = this.state;\n        this.ctrl.setEventIds(event);\n        try {\n            event.target.releasePointerCapture(event.pointerId);\n        } catch (_unused) {}\n        if (state._pointerEvents.has(event.pointerId)) {\n            state._pointerEvents.delete(event.pointerId);\n        }\n        if (!state._active) return;\n        if (state._pointerEvents.size < 2) {\n            state._active = false;\n            this.compute(event);\n            this.emit();\n        }\n    }\n    gestureStart(event) {\n        if (event.cancelable) event.preventDefault();\n        const state = this.state;\n        if (state._active) return;\n        this.start(event);\n        this.computeValues([\n            event.scale,\n            event.rotation\n        ]);\n        state.origin = [\n            event.clientX,\n            event.clientY\n        ];\n        this.compute(event);\n        this.emit();\n    }\n    gestureMove(event) {\n        if (event.cancelable) event.preventDefault();\n        if (!this.state._active) return;\n        const state = this.state;\n        this.computeValues([\n            event.scale,\n            event.rotation\n        ]);\n        state.origin = [\n            event.clientX,\n            event.clientY\n        ];\n        const _previousMovement = state._movement;\n        state._movement = [\n            event.scale - 1,\n            event.rotation\n        ];\n        state._delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(state._movement, _previousMovement);\n        this.compute(event);\n        this.emit();\n    }\n    gestureEnd(event) {\n        if (!this.state._active) return;\n        this.state._active = false;\n        this.compute(event);\n        this.emit();\n    }\n    wheel(event) {\n        const modifierKey = this.config.modifierKey;\n        if (modifierKey && (Array.isArray(modifierKey) ? !modifierKey.find((k)=>event[k]) : !event[modifierKey])) return;\n        if (!this.state._active) this.wheelStart(event);\n        else this.wheelChange(event);\n        this.timeoutStore.add(\"wheelEnd\", this.wheelEnd.bind(this));\n    }\n    wheelStart(event) {\n        this.start(event);\n        this.wheelChange(event);\n    }\n    wheelChange(event) {\n        const isR3f = \"uv\" in event;\n        if (!isR3f) {\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            if ( true && !event.defaultPrevented) {\n                console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \\`target\\` option.\\n\\nThis message will only appear in development mode.`);\n            }\n        }\n        const state = this.state;\n        state._delta = [\n            -wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0],\n            0\n        ];\n        _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._movement, state._delta);\n        clampStateInternalMovementToBounds(state);\n        this.state.origin = [\n            event.clientX,\n            event.clientY\n        ];\n        this.compute(event);\n        this.emit();\n    }\n    wheelEnd() {\n        if (!this.state._active) return;\n        this.state._active = false;\n        this.compute();\n        this.emit();\n    }\n    bind(bindFunction) {\n        const device = this.config.device;\n        if (!!device) {\n            bindFunction(device, \"start\", this[device + \"Start\"].bind(this));\n            bindFunction(device, \"change\", this[device + \"Move\"].bind(this));\n            bindFunction(device, \"end\", this[device + \"End\"].bind(this));\n            bindFunction(device, \"cancel\", this[device + \"End\"].bind(this));\n            bindFunction(\"lostPointerCapture\", \"\", this[device + \"End\"].bind(this));\n        }\n        if (this.config.pinchOnWheel) {\n            bindFunction(\"wheel\", \"\", this.wheel.bind(this), {\n                passive: false\n            });\n        }\n    }\n}\nconst pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {\n    device (_v, _k, { shared, pointer: { touch = false } = {} }) {\n        const sharedConfig = shared;\n        if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture) return \"gesture\";\n        if (SUPPORT.touch && touch) return \"touch\";\n        if (SUPPORT.touchscreen) {\n            if (SUPPORT.pointer) return \"pointer\";\n            if (SUPPORT.touch) return \"touch\";\n        }\n    },\n    bounds (_v, _k, { scaleBounds = {}, angleBounds = {} }) {\n        const _scaleBounds = (state)=>{\n            const D = assignDefault(call(scaleBounds, state), {\n                min: -Infinity,\n                max: Infinity\n            });\n            return [\n                D.min,\n                D.max\n            ];\n        };\n        const _angleBounds = (state)=>{\n            const A = assignDefault(call(angleBounds, state), {\n                min: -Infinity,\n                max: Infinity\n            });\n            return [\n                A.min,\n                A.max\n            ];\n        };\n        if (typeof scaleBounds !== \"function\" && typeof angleBounds !== \"function\") return [\n            _scaleBounds(),\n            _angleBounds()\n        ];\n        return (state)=>[\n                _scaleBounds(state),\n                _angleBounds(state)\n            ];\n    },\n    threshold (value, _k, config) {\n        this.lockDirection = config.axis === \"lock\";\n        const threshold = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.toVector(value, this.lockDirection ? [\n            0.1,\n            3\n        ] : 0);\n        return threshold;\n    },\n    modifierKey (value) {\n        if (value === undefined) return \"ctrlKey\";\n        return value;\n    },\n    pinchOnWheel (value = true) {\n        return value;\n    }\n});\nclass MoveEngine extends CoordinatesEngine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"ingKey\", \"moving\");\n    }\n    move(event) {\n        if (this.config.mouseOnly && event.pointerType !== \"mouse\") return;\n        if (!this.state._active) this.moveStart(event);\n        else this.moveChange(event);\n        this.timeoutStore.add(\"moveEnd\", this.moveEnd.bind(this));\n    }\n    moveStart(event) {\n        this.start(event);\n        this.computeValues(pointerValues(event));\n        this.compute(event);\n        this.computeInitial();\n        this.emit();\n    }\n    moveChange(event) {\n        if (!this.state._active) return;\n        const values = pointerValues(event);\n        const state = this.state;\n        state._delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(values, state._values);\n        _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._movement, state._delta);\n        this.computeValues(values);\n        this.compute(event);\n        this.emit();\n    }\n    moveEnd(event) {\n        if (!this.state._active) return;\n        this.state._active = false;\n        this.compute(event);\n        this.emit();\n    }\n    bind(bindFunction) {\n        bindFunction(\"pointer\", \"change\", this.move.bind(this));\n        bindFunction(\"pointer\", \"leave\", this.moveEnd.bind(this));\n    }\n}\nconst moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n    mouseOnly: (value = true)=>value\n});\nclass ScrollEngine extends CoordinatesEngine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"ingKey\", \"scrolling\");\n    }\n    scroll(event) {\n        if (!this.state._active) this.start(event);\n        this.scrollChange(event);\n        this.timeoutStore.add(\"scrollEnd\", this.scrollEnd.bind(this));\n    }\n    scrollChange(event) {\n        if (event.cancelable) event.preventDefault();\n        const state = this.state;\n        const values = scrollValues(event);\n        state._delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(values, state._values);\n        _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._movement, state._delta);\n        this.computeValues(values);\n        this.compute(event);\n        this.emit();\n    }\n    scrollEnd() {\n        if (!this.state._active) return;\n        this.state._active = false;\n        this.compute();\n        this.emit();\n    }\n    bind(bindFunction) {\n        bindFunction(\"scroll\", \"\", this.scroll.bind(this));\n    }\n}\nconst scrollConfigResolver = coordinatesConfigResolver;\nclass WheelEngine extends CoordinatesEngine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"ingKey\", \"wheeling\");\n    }\n    wheel(event) {\n        if (!this.state._active) this.start(event);\n        this.wheelChange(event);\n        this.timeoutStore.add(\"wheelEnd\", this.wheelEnd.bind(this));\n    }\n    wheelChange(event) {\n        const state = this.state;\n        state._delta = wheelValues(event);\n        _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.addTo(state._movement, state._delta);\n        clampStateInternalMovementToBounds(state);\n        this.compute(event);\n        this.emit();\n    }\n    wheelEnd() {\n        if (!this.state._active) return;\n        this.state._active = false;\n        this.compute();\n        this.emit();\n    }\n    bind(bindFunction) {\n        bindFunction(\"wheel\", \"\", this.wheel.bind(this));\n    }\n}\nconst wheelConfigResolver = coordinatesConfigResolver;\nclass HoverEngine extends CoordinatesEngine {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"ingKey\", \"hovering\");\n    }\n    enter(event) {\n        if (this.config.mouseOnly && event.pointerType !== \"mouse\") return;\n        this.start(event);\n        this.computeValues(pointerValues(event));\n        this.compute(event);\n        this.emit();\n    }\n    leave(event) {\n        if (this.config.mouseOnly && event.pointerType !== \"mouse\") return;\n        const state = this.state;\n        if (!state._active) return;\n        state._active = false;\n        const values = pointerValues(event);\n        state._movement = state._delta = _maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.V.sub(values, state._values);\n        this.computeValues(values);\n        this.compute(event);\n        state.delta = state.movement;\n        this.emit();\n    }\n    bind(bindFunction) {\n        bindFunction(\"pointer\", \"enter\", this.enter.bind(this));\n        bindFunction(\"pointer\", \"leave\", this.leave.bind(this));\n    }\n}\nconst hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {\n    mouseOnly: (value = true)=>value\n});\nconst EngineMap = new Map();\nconst ConfigResolverMap = new Map();\nfunction registerAction(action) {\n    EngineMap.set(action.key, action.engine);\n    ConfigResolverMap.set(action.key, action.resolver);\n}\nconst dragAction = {\n    key: \"drag\",\n    engine: DragEngine,\n    resolver: dragConfigResolver\n};\nconst hoverAction = {\n    key: \"hover\",\n    engine: HoverEngine,\n    resolver: hoverConfigResolver\n};\nconst moveAction = {\n    key: \"move\",\n    engine: MoveEngine,\n    resolver: moveConfigResolver\n};\nconst pinchAction = {\n    key: \"pinch\",\n    engine: PinchEngine,\n    resolver: pinchConfigResolver\n};\nconst scrollAction = {\n    key: \"scroll\",\n    engine: ScrollEngine,\n    resolver: scrollConfigResolver\n};\nconst wheelAction = {\n    key: \"wheel\",\n    engine: WheelEngine,\n    resolver: wheelConfigResolver\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   V: () => (/* binding */ V),\n/* harmony export */   c: () => (/* binding */ computeRubberband),\n/* harmony export */   r: () => (/* binding */ rubberbandIfOutOfBounds)\n/* harmony export */ });\nfunction clamp(v, min, max) {\n    return Math.max(min, Math.min(v, max));\n}\nconst V = {\n    toVector (v, fallback) {\n        if (v === undefined) v = fallback;\n        return Array.isArray(v) ? v : [\n            v,\n            v\n        ];\n    },\n    add (v1, v2) {\n        return [\n            v1[0] + v2[0],\n            v1[1] + v2[1]\n        ];\n    },\n    sub (v1, v2) {\n        return [\n            v1[0] - v2[0],\n            v1[1] - v2[1]\n        ];\n    },\n    addTo (v1, v2) {\n        v1[0] += v2[0];\n        v1[1] += v2[1];\n    },\n    subTo (v1, v2) {\n        v1[0] -= v2[0];\n        v1[1] -= v2[1];\n    }\n};\nfunction rubberband(distance, dimension, constant) {\n    if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);\n    return distance * dimension * constant / (dimension + constant * distance);\n}\nfunction rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {\n    if (constant === 0) return clamp(position, min, max);\n    if (position < min) return -rubberband(min - position, max - min, constant) + min;\n    if (position > max) return +rubberband(position - max, max - min, constant) + max;\n    return position;\n}\nfunction computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {\n    const [[X0, X1], [Y0, Y1]] = bounds;\n    return [\n        rubberbandIfOutOfBounds(Vx, X0, X1, Rx),\n        rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL2NvcmUvZGlzdC9tYXRocy0wYWIzOWFlOS5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsU0FBU0EsTUFBTUMsQ0FBQyxFQUFFQyxHQUFHLEVBQUVDLEdBQUc7SUFDeEIsT0FBT0MsS0FBS0QsR0FBRyxDQUFDRCxLQUFLRSxLQUFLRixHQUFHLENBQUNELEdBQUdFO0FBQ25DO0FBQ0EsTUFBTUUsSUFBSTtJQUNSQyxVQUFTTCxDQUFDLEVBQUVNLFFBQVE7UUFDbEIsSUFBSU4sTUFBTU8sV0FBV1AsSUFBSU07UUFDekIsT0FBT0UsTUFBTUMsT0FBTyxDQUFDVCxLQUFLQSxJQUFJO1lBQUNBO1lBQUdBO1NBQUU7SUFDdEM7SUFDQVUsS0FBSUMsRUFBRSxFQUFFQyxFQUFFO1FBQ1IsT0FBTztZQUFDRCxFQUFFLENBQUMsRUFBRSxHQUFHQyxFQUFFLENBQUMsRUFBRTtZQUFFRCxFQUFFLENBQUMsRUFBRSxHQUFHQyxFQUFFLENBQUMsRUFBRTtTQUFDO0lBQ3ZDO0lBQ0FDLEtBQUlGLEVBQUUsRUFBRUMsRUFBRTtRQUNSLE9BQU87WUFBQ0QsRUFBRSxDQUFDLEVBQUUsR0FBR0MsRUFBRSxDQUFDLEVBQUU7WUFBRUQsRUFBRSxDQUFDLEVBQUUsR0FBR0MsRUFBRSxDQUFDLEVBQUU7U0FBQztJQUN2QztJQUNBRSxPQUFNSCxFQUFFLEVBQUVDLEVBQUU7UUFDVkQsRUFBRSxDQUFDLEVBQUUsSUFBSUMsRUFBRSxDQUFDLEVBQUU7UUFDZEQsRUFBRSxDQUFDLEVBQUUsSUFBSUMsRUFBRSxDQUFDLEVBQUU7SUFDaEI7SUFDQUcsT0FBTUosRUFBRSxFQUFFQyxFQUFFO1FBQ1ZELEVBQUUsQ0FBQyxFQUFFLElBQUlDLEVBQUUsQ0FBQyxFQUFFO1FBQ2RELEVBQUUsQ0FBQyxFQUFFLElBQUlDLEVBQUUsQ0FBQyxFQUFFO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTSSxXQUFXQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsUUFBUTtJQUMvQyxJQUFJRCxjQUFjLEtBQUtmLEtBQUtpQixHQUFHLENBQUNGLGVBQWVHLFVBQVUsT0FBT2xCLEtBQUttQixHQUFHLENBQUNMLFVBQVVFLFdBQVc7SUFDOUYsT0FBT0YsV0FBV0MsWUFBWUMsV0FBWUQsQ0FBQUEsWUFBWUMsV0FBV0YsUUFBTztBQUMxRTtBQUNBLFNBQVNNLHdCQUF3QkMsUUFBUSxFQUFFdkIsR0FBRyxFQUFFQyxHQUFHLEVBQUVpQixXQUFXLElBQUk7SUFDbEUsSUFBSUEsYUFBYSxHQUFHLE9BQU9wQixNQUFNeUIsVUFBVXZCLEtBQUtDO0lBQ2hELElBQUlzQixXQUFXdkIsS0FBSyxPQUFPLENBQUNlLFdBQVdmLE1BQU11QixVQUFVdEIsTUFBTUQsS0FBS2tCLFlBQVlsQjtJQUM5RSxJQUFJdUIsV0FBV3RCLEtBQUssT0FBTyxDQUFDYyxXQUFXUSxXQUFXdEIsS0FBS0EsTUFBTUQsS0FBS2tCLFlBQVlqQjtJQUM5RSxPQUFPc0I7QUFDVDtBQUNBLFNBQVNDLGtCQUFrQkMsTUFBTSxFQUFFLENBQUNDLElBQUlDLEdBQUcsRUFBRSxDQUFDQyxJQUFJQyxHQUFHO0lBQ25ELE1BQU0sQ0FBQyxDQUFDQyxJQUFJQyxHQUFHLEVBQUUsQ0FBQ0MsSUFBSUMsR0FBRyxDQUFDLEdBQUdSO0lBQzdCLE9BQU87UUFBQ0gsd0JBQXdCSSxJQUFJSSxJQUFJQyxJQUFJSDtRQUFLTix3QkFBd0JLLElBQUlLLElBQUlDLElBQUlKO0tBQUk7QUFDM0Y7QUFFbUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMtY3JlZGl0LWNhcmQtYXBwLy4vbm9kZV9tb2R1bGVzL0B1c2UtZ2VzdHVyZS9jb3JlL2Rpc3QvbWF0aHMtMGFiMzlhZTkuZXNtLmpzPzAwMzYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2xhbXAodiwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4odiwgbWF4KSk7XG59XG5jb25zdCBWID0ge1xuICB0b1ZlY3Rvcih2LCBmYWxsYmFjaykge1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHYgPSBmYWxsYmFjaztcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KSA/IHYgOiBbdiwgdl07XG4gIH0sXG4gIGFkZCh2MSwgdjIpIHtcbiAgICByZXR1cm4gW3YxWzBdICsgdjJbMF0sIHYxWzFdICsgdjJbMV1dO1xuICB9LFxuICBzdWIodjEsIHYyKSB7XG4gICAgcmV0dXJuIFt2MVswXSAtIHYyWzBdLCB2MVsxXSAtIHYyWzFdXTtcbiAgfSxcbiAgYWRkVG8odjEsIHYyKSB7XG4gICAgdjFbMF0gKz0gdjJbMF07XG4gICAgdjFbMV0gKz0gdjJbMV07XG4gIH0sXG4gIHN1YlRvKHYxLCB2Mikge1xuICAgIHYxWzBdIC09IHYyWzBdO1xuICAgIHYxWzFdIC09IHYyWzFdO1xuICB9XG59O1xuZnVuY3Rpb24gcnViYmVyYmFuZChkaXN0YW5jZSwgZGltZW5zaW9uLCBjb25zdGFudCkge1xuICBpZiAoZGltZW5zaW9uID09PSAwIHx8IE1hdGguYWJzKGRpbWVuc2lvbikgPT09IEluZmluaXR5KSByZXR1cm4gTWF0aC5wb3coZGlzdGFuY2UsIGNvbnN0YW50ICogNSk7XG4gIHJldHVybiBkaXN0YW5jZSAqIGRpbWVuc2lvbiAqIGNvbnN0YW50IC8gKGRpbWVuc2lvbiArIGNvbnN0YW50ICogZGlzdGFuY2UpO1xufVxuZnVuY3Rpb24gcnViYmVyYmFuZElmT3V0T2ZCb3VuZHMocG9zaXRpb24sIG1pbiwgbWF4LCBjb25zdGFudCA9IDAuMTUpIHtcbiAgaWYgKGNvbnN0YW50ID09PSAwKSByZXR1cm4gY2xhbXAocG9zaXRpb24sIG1pbiwgbWF4KTtcbiAgaWYgKHBvc2l0aW9uIDwgbWluKSByZXR1cm4gLXJ1YmJlcmJhbmQobWluIC0gcG9zaXRpb24sIG1heCAtIG1pbiwgY29uc3RhbnQpICsgbWluO1xuICBpZiAocG9zaXRpb24gPiBtYXgpIHJldHVybiArcnViYmVyYmFuZChwb3NpdGlvbiAtIG1heCwgbWF4IC0gbWluLCBjb25zdGFudCkgKyBtYXg7XG4gIHJldHVybiBwb3NpdGlvbjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVSdWJiZXJiYW5kKGJvdW5kcywgW1Z4LCBWeV0sIFtSeCwgUnldKSB7XG4gIGNvbnN0IFtbWDAsIFgxXSwgW1kwLCBZMV1dID0gYm91bmRzO1xuICByZXR1cm4gW3J1YmJlcmJhbmRJZk91dE9mQm91bmRzKFZ4LCBYMCwgWDEsIFJ4KSwgcnViYmVyYmFuZElmT3V0T2ZCb3VuZHMoVnksIFkwLCBZMSwgUnkpXTtcbn1cblxuZXhwb3J0IHsgViwgY29tcHV0ZVJ1YmJlcmJhbmQgYXMgYywgcnViYmVyYmFuZElmT3V0T2ZCb3VuZHMgYXMgciB9O1xuIl0sIm5hbWVzIjpbImNsYW1wIiwidiIsIm1pbiIsIm1heCIsIk1hdGgiLCJWIiwidG9WZWN0b3IiLCJmYWxsYmFjayIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImFkZCIsInYxIiwidjIiLCJzdWIiLCJhZGRUbyIsInN1YlRvIiwicnViYmVyYmFuZCIsImRpc3RhbmNlIiwiZGltZW5zaW9uIiwiY29uc3RhbnQiLCJhYnMiLCJJbmZpbml0eSIsInBvdyIsInJ1YmJlcmJhbmRJZk91dE9mQm91bmRzIiwicG9zaXRpb24iLCJjb21wdXRlUnViYmVyYmFuZCIsImJvdW5kcyIsIlZ4IiwiVnkiLCJSeCIsIlJ5IiwiWDAiLCJYMSIsIlkwIiwiWTEiLCJjIiwiciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@use-gesture/core/dist/use-gesture-core.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@use-gesture/core/dist/use-gesture-core.esm.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Controller: () => (/* binding */ Controller),\n/* harmony export */   parseMergedHandlers: () => (/* binding */ parseMergedHandlers)\n/* harmony export */ });\n/* harmony import */ var _actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions-fe213e88.esm.js */ \"(ssr)/./node_modules/@use-gesture/core/dist/actions-fe213e88.esm.js\");\n\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nconst sharedConfigResolver = {\n    target (value) {\n        if (value) {\n            return ()=>\"current\" in value ? value.current : value;\n        }\n        return undefined;\n    },\n    enabled (value = true) {\n        return value;\n    },\n    window (value = _actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.S.isBrowser ? window : undefined) {\n        return value;\n    },\n    eventOptions ({ passive = true, capture = false } = {}) {\n        return {\n            passive,\n            capture\n        };\n    },\n    transform (value) {\n        return value;\n    }\n};\nconst _excluded = [\n    \"target\",\n    \"eventOptions\",\n    \"window\",\n    \"enabled\",\n    \"transform\"\n];\nfunction resolveWith(config = {}, resolvers) {\n    const result = {};\n    for (const [key, resolver] of Object.entries(resolvers)){\n        switch(typeof resolver){\n            case \"function\":\n                if (true) {\n                    const r = resolver.call(result, config[key], key, config);\n                    if (!Number.isNaN(r)) result[key] = r;\n                } else {}\n                break;\n            case \"object\":\n                result[key] = resolveWith(config[key], resolver);\n                break;\n            case \"boolean\":\n                if (resolver) result[key] = config[key];\n                break;\n        }\n    }\n    return result;\n}\nfunction parse(newConfig, gestureKey, _config = {}) {\n    const _ref = newConfig, { target, eventOptions, window: window1, enabled, transform } = _ref, rest = _objectWithoutProperties(_ref, _excluded);\n    _config.shared = resolveWith({\n        target,\n        eventOptions,\n        window: window1,\n        enabled,\n        transform\n    }, sharedConfigResolver);\n    if (gestureKey) {\n        const resolver = _actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.C.get(gestureKey);\n        _config[gestureKey] = resolveWith((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            shared: _config.shared\n        }, rest), resolver);\n    } else {\n        for(const key in rest){\n            const resolver = _actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.C.get(key);\n            if (resolver) {\n                _config[key] = resolveWith((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                    shared: _config.shared\n                }, rest[key]), resolver);\n            } else if (true) {\n                if (![\n                    \"drag\",\n                    \"pinch\",\n                    \"scroll\",\n                    \"wheel\",\n                    \"move\",\n                    \"hover\"\n                ].includes(key)) {\n                    if (key === \"domTarget\") {\n                        throw Error(`[@use-gesture]: \\`domTarget\\` option has been renamed to \\`target\\`.`);\n                    }\n                    console.warn(`[@use-gesture]: Unknown config key \\`${key}\\` was used. Please read the documentation for further information.`);\n                }\n            }\n        }\n    }\n    return _config;\n}\nclass EventStore {\n    constructor(ctrl, gestureKey){\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"_listeners\", new Set());\n        this._ctrl = ctrl;\n        this._gestureKey = gestureKey;\n    }\n    add(element, device, action, handler, options) {\n        const listeners = this._listeners;\n        const type = (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.t)(device, action);\n        const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};\n        const eventOptions = (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, _options), options);\n        element.addEventListener(type, handler, eventOptions);\n        const remove = ()=>{\n            element.removeEventListener(type, handler, eventOptions);\n            listeners.delete(remove);\n        };\n        listeners.add(remove);\n        return remove;\n    }\n    clean() {\n        this._listeners.forEach((remove)=>remove());\n        this._listeners.clear();\n    }\n}\nclass TimeoutStore {\n    constructor(){\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"_timeouts\", new Map());\n    }\n    add(key, callback, ms = 140, ...args) {\n        this.remove(key);\n        this._timeouts.set(key, window.setTimeout(callback, ms, ...args));\n    }\n    remove(key) {\n        const timeout = this._timeouts.get(key);\n        if (timeout) window.clearTimeout(timeout);\n    }\n    clean() {\n        this._timeouts.forEach((timeout)=>void window.clearTimeout(timeout));\n        this._timeouts.clear();\n    }\n}\nclass Controller {\n    constructor(handlers){\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"gestures\", new Set());\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"_targetEventStore\", new EventStore(this));\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"gestureEventStores\", {});\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"gestureTimeoutStores\", {});\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"handlers\", {});\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"config\", {});\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"pointerIds\", new Set());\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"touchIds\", new Set());\n        (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(this, \"state\", {\n            shared: {\n                shiftKey: false,\n                metaKey: false,\n                ctrlKey: false,\n                altKey: false\n            }\n        });\n        resolveGestures(this, handlers);\n    }\n    setEventIds(event) {\n        if ((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(event)) {\n            this.touchIds = new Set((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)(event));\n            return this.touchIds;\n        } else if (\"pointerId\" in event) {\n            if (event.type === \"pointerup\" || event.type === \"pointercancel\") this.pointerIds.delete(event.pointerId);\n            else if (event.type === \"pointerdown\") this.pointerIds.add(event.pointerId);\n            return this.pointerIds;\n        }\n    }\n    applyHandlers(handlers, nativeHandlers) {\n        this.handlers = handlers;\n        this.nativeHandlers = nativeHandlers;\n    }\n    applyConfig(config, gestureKey) {\n        this.config = parse(config, gestureKey, this.config);\n    }\n    clean() {\n        this._targetEventStore.clean();\n        for (const key of this.gestures){\n            this.gestureEventStores[key].clean();\n            this.gestureTimeoutStores[key].clean();\n        }\n    }\n    effect() {\n        if (this.config.shared.target) this.bind();\n        return ()=>this._targetEventStore.clean();\n    }\n    bind(...args) {\n        const sharedConfig = this.config.shared;\n        const props = {};\n        let target;\n        if (sharedConfig.target) {\n            target = sharedConfig.target();\n            if (!target) return;\n        }\n        if (sharedConfig.enabled) {\n            for (const gestureKey of this.gestures){\n                const gestureConfig = this.config[gestureKey];\n                const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);\n                if (gestureConfig.enabled) {\n                    const Engine = _actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.E.get(gestureKey);\n                    new Engine(this, args, gestureKey).bind(bindFunction);\n                }\n            }\n            const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);\n            for(const eventKey in this.nativeHandlers){\n                nativeBindFunction(eventKey, \"\", (event)=>this.nativeHandlers[eventKey]((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__._)((0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, this.state.shared), {}, {\n                        event,\n                        args\n                    })), undefined, true);\n            }\n        }\n        for(const handlerProp in props){\n            props[handlerProp] = (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(...props[handlerProp]);\n        }\n        if (!target) return props;\n        for(const handlerProp in props){\n            const { device, capture, passive } = (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.p)(handlerProp);\n            this._targetEventStore.add(target, device, \"\", props[handlerProp], {\n                capture,\n                passive\n            });\n        }\n    }\n}\nfunction setupGesture(ctrl, gestureKey) {\n    ctrl.gestures.add(gestureKey);\n    ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);\n    ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();\n}\nfunction resolveGestures(ctrl, internalHandlers) {\n    if (internalHandlers.drag) setupGesture(ctrl, \"drag\");\n    if (internalHandlers.wheel) setupGesture(ctrl, \"wheel\");\n    if (internalHandlers.scroll) setupGesture(ctrl, \"scroll\");\n    if (internalHandlers.move) setupGesture(ctrl, \"move\");\n    if (internalHandlers.pinch) setupGesture(ctrl, \"pinch\");\n    if (internalHandlers.hover) setupGesture(ctrl, \"hover\");\n}\nconst bindToProps = (props, eventOptions, withPassiveOption)=>(device, action, handler, options = {}, isNative = false)=>{\n        var _options$capture, _options$passive;\n        const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;\n        const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;\n        let handlerProp = isNative ? device : (0,_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(device, action, capture);\n        if (withPassiveOption && passive) handlerProp += \"Passive\";\n        props[handlerProp] = props[handlerProp] || [];\n        props[handlerProp].push(handler);\n    };\nconst RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;\nfunction sortHandlers(_handlers) {\n    const native = {};\n    const handlers = {};\n    const actions = new Set();\n    for(let key in _handlers){\n        if (RE_NOT_NATIVE.test(key)) {\n            actions.add(RegExp.lastMatch);\n            handlers[key] = _handlers[key];\n        } else {\n            native[key] = _handlers[key];\n        }\n    }\n    return [\n        handlers,\n        native,\n        actions\n    ];\n}\nfunction registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {\n    if (!actions.has(handlerKey)) return;\n    if (!_actions_fe213e88_esm_js__WEBPACK_IMPORTED_MODULE_0__.E.has(key)) {\n        if (true) {\n            console.warn(`[@use-gesture]: You've created a custom handler that that uses the \\`${key}\\` gesture but isn't properly configured.\\n\\nPlease add \\`${key}Action\\` when creating your handler.`);\n        }\n        return;\n    }\n    const startKey = handlerKey + \"Start\";\n    const endKey = handlerKey + \"End\";\n    const fn = (state)=>{\n        let memo = undefined;\n        if (state.first && startKey in handlers) handlers[startKey](state);\n        if (handlerKey in handlers) memo = handlers[handlerKey](state);\n        if (state.last && endKey in handlers) handlers[endKey](state);\n        return memo;\n    };\n    internalHandlers[key] = fn;\n    config[key] = config[key] || {};\n}\nfunction parseMergedHandlers(mergedHandlers, mergedConfig) {\n    const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);\n    const internalHandlers = {};\n    registerGesture(actions, handlers, \"onDrag\", \"drag\", internalHandlers, mergedConfig);\n    registerGesture(actions, handlers, \"onWheel\", \"wheel\", internalHandlers, mergedConfig);\n    registerGesture(actions, handlers, \"onScroll\", \"scroll\", internalHandlers, mergedConfig);\n    registerGesture(actions, handlers, \"onPinch\", \"pinch\", internalHandlers, mergedConfig);\n    registerGesture(actions, handlers, \"onMove\", \"move\", internalHandlers, mergedConfig);\n    registerGesture(actions, handlers, \"onHover\", \"hover\", internalHandlers, mergedConfig);\n    return {\n        handlers: internalHandlers,\n        config: mergedConfig,\n        nativeHandlers\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/core/dist/use-gesture-core.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@use-gesture/core/types/dist/use-gesture-core-types.esm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@use-gesture/core/types/dist/use-gesture-core-types.esm.js ***!
  \*********************************************************************************/
/***/ (() => {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy9AdXNlLWdlc3R1cmUvY29yZS90eXBlcy9kaXN0L3VzZS1nZXN0dXJlLWNvcmUtdHlwZXMuZXNtLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/core/types/dist/use-gesture-core-types.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.esm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.esm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rubberbandIfOutOfBounds: () => (/* reexport safe */ _dist_maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__.r)\n/* harmony export */ });\n/* harmony import */ var _dist_maths_0ab39ae9_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../dist/maths-0ab39ae9.esm.js */ \"(ssr)/./node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL2NvcmUvdXRpbHMvZGlzdC91c2UtZ2VzdHVyZS1jb3JlLXV0aWxzLmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1jcmVkaXQtY2FyZC1hcHAvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL2NvcmUvdXRpbHMvZGlzdC91c2UtZ2VzdHVyZS1jb3JlLXV0aWxzLmVzbS5qcz84MDc4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IHIgYXMgcnViYmVyYmFuZElmT3V0T2ZCb3VuZHMgfSBmcm9tICcuLi8uLi9kaXN0L21hdGhzLTBhYjM5YWU5LmVzbS5qcyc7XG4iXSwibmFtZXMiOlsiciIsInJ1YmJlcmJhbmRJZk91dE9mQm91bmRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@use-gesture/react/dist/use-gesture-react.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@use-gesture/react/dist/use-gesture-react.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConfigResolverMap: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.ConfigResolverMap),\n/* harmony export */   EngineMap: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.EngineMap),\n/* harmony export */   createUseGesture: () => (/* binding */ createUseGesture),\n/* harmony export */   dragAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.dragAction),\n/* harmony export */   hoverAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.hoverAction),\n/* harmony export */   moveAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.moveAction),\n/* harmony export */   pinchAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.pinchAction),\n/* harmony export */   registerAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction),\n/* harmony export */   rubberbandIfOutOfBounds: () => (/* reexport safe */ _use_gesture_core_utils__WEBPACK_IMPORTED_MODULE_2__.rubberbandIfOutOfBounds),\n/* harmony export */   scrollAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.scrollAction),\n/* harmony export */   useDrag: () => (/* binding */ useDrag),\n/* harmony export */   useGesture: () => (/* binding */ useGesture),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useMove: () => (/* binding */ useMove),\n/* harmony export */   usePinch: () => (/* binding */ usePinch),\n/* harmony export */   useScroll: () => (/* binding */ useScroll),\n/* harmony export */   useWheel: () => (/* binding */ useWheel),\n/* harmony export */   wheelAction: () => (/* reexport safe */ _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.wheelAction)\n/* harmony export */ });\n/* harmony import */ var _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @use-gesture/core/actions */ \"(ssr)/./node_modules/@use-gesture/core/actions/dist/use-gesture-core-actions.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _use_gesture_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @use-gesture/core */ \"(ssr)/./node_modules/@use-gesture/core/dist/use-gesture-core.esm.js\");\n/* harmony import */ var _use_gesture_core_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @use-gesture/core/utils */ \"(ssr)/./node_modules/@use-gesture/core/utils/dist/use-gesture-core-utils.esm.js\");\n/* harmony import */ var _use_gesture_core_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @use-gesture/core/types */ \"(ssr)/./node_modules/@use-gesture/core/types/dist/use-gesture-core-types.esm.js\");\n/* harmony import */ var _use_gesture_core_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_use_gesture_core_types__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _use_gesture_core_types__WEBPACK_IMPORTED_MODULE_3__) if([\"default\",\"createUseGesture\",\"useDrag\",\"useGesture\",\"useHover\",\"useMove\",\"usePinch\",\"useScroll\",\"useWheel\",\"ConfigResolverMap\",\"EngineMap\",\"dragAction\",\"hoverAction\",\"moveAction\",\"pinchAction\",\"registerAction\",\"scrollAction\",\"wheelAction\",\"rubberbandIfOutOfBounds\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _use_gesture_core_types__WEBPACK_IMPORTED_MODULE_3__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n\n\n\nfunction useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {\n    const ctrl = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo(()=>new _use_gesture_core__WEBPACK_IMPORTED_MODULE_4__.Controller(handlers), []);\n    ctrl.applyHandlers(handlers, nativeHandlers);\n    ctrl.applyConfig(config, gestureKey);\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(ctrl.effect.bind(ctrl));\n    react__WEBPACK_IMPORTED_MODULE_1___default().useEffect(()=>{\n        return ctrl.clean.bind(ctrl);\n    }, []);\n    if (config.target === undefined) {\n        return ctrl.bind.bind(ctrl);\n    }\n    return undefined;\n}\nfunction useDrag(handler, config) {\n    (0,_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction)(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.dragAction);\n    return useRecognizers({\n        drag: handler\n    }, config || {}, \"drag\");\n}\nfunction usePinch(handler, config) {\n    (0,_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction)(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.pinchAction);\n    return useRecognizers({\n        pinch: handler\n    }, config || {}, \"pinch\");\n}\nfunction useWheel(handler, config) {\n    (0,_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction)(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.wheelAction);\n    return useRecognizers({\n        wheel: handler\n    }, config || {}, \"wheel\");\n}\nfunction useScroll(handler, config) {\n    (0,_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction)(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.scrollAction);\n    return useRecognizers({\n        scroll: handler\n    }, config || {}, \"scroll\");\n}\nfunction useMove(handler, config) {\n    (0,_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction)(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.moveAction);\n    return useRecognizers({\n        move: handler\n    }, config || {}, \"move\");\n}\nfunction useHover(handler, config) {\n    (0,_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction)(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.hoverAction);\n    return useRecognizers({\n        hover: handler\n    }, config || {}, \"hover\");\n}\nfunction createUseGesture(actions) {\n    actions.forEach(_use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.registerAction);\n    return function useGesture(_handlers, _config) {\n        const { handlers, nativeHandlers, config } = (0,_use_gesture_core__WEBPACK_IMPORTED_MODULE_4__.parseMergedHandlers)(_handlers, _config || {});\n        return useRecognizers(handlers, config, undefined, nativeHandlers);\n    };\n}\nfunction useGesture(handlers, config) {\n    const hook = createUseGesture([\n        _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.dragAction,\n        _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.pinchAction,\n        _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.scrollAction,\n        _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.wheelAction,\n        _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.moveAction,\n        _use_gesture_core_actions__WEBPACK_IMPORTED_MODULE_0__.hoverAction\n    ]);\n    return hook(handlers, config || {});\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL3JlYWN0L2Rpc3QvdXNlLWdlc3R1cmUtcmVhY3QuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0k7QUFDOUY7QUFDaEI7QUFDMEM7QUFDNUI7QUFDQTtBQUV4QyxTQUFTVSxlQUFlQyxRQUFRLEVBQUVDLFNBQVMsQ0FBQyxDQUFDLEVBQUVDLFVBQVUsRUFBRUMsY0FBYztJQUN2RSxNQUFNQyxPQUFPUixvREFBYSxDQUFDLElBQU0sSUFBSUMseURBQVVBLENBQUNHLFdBQVcsRUFBRTtJQUM3REksS0FBS0UsYUFBYSxDQUFDTixVQUFVRztJQUM3QkMsS0FBS0csV0FBVyxDQUFDTixRQUFRQztJQUN6Qk4sc0RBQWUsQ0FBQ1EsS0FBS0ssTUFBTSxDQUFDQyxJQUFJLENBQUNOO0lBQ2pDUixzREFBZSxDQUFDO1FBQ2QsT0FBT1EsS0FBS08sS0FBSyxDQUFDRCxJQUFJLENBQUNOO0lBQ3pCLEdBQUcsRUFBRTtJQUNMLElBQUlILE9BQU9XLE1BQU0sS0FBS0MsV0FBVztRQUMvQixPQUFPVCxLQUFLTSxJQUFJLENBQUNBLElBQUksQ0FBQ047SUFDeEI7SUFDQSxPQUFPUztBQUNUO0FBRUEsU0FBU0MsUUFBUUMsT0FBTyxFQUFFZCxNQUFNO0lBQzlCWix5RUFBY0EsQ0FBQ0MsaUVBQVVBO0lBQ3pCLE9BQU9TLGVBQWU7UUFDcEJpQixNQUFNRDtJQUNSLEdBQUdkLFVBQVUsQ0FBQyxHQUFHO0FBQ25CO0FBRUEsU0FBU2dCLFNBQVNGLE9BQU8sRUFBRWQsTUFBTTtJQUMvQloseUVBQWNBLENBQUNFLGtFQUFXQTtJQUMxQixPQUFPUSxlQUFlO1FBQ3BCbUIsT0FBT0g7SUFDVCxHQUFHZCxVQUFVLENBQUMsR0FBRztBQUNuQjtBQUVBLFNBQVNrQixTQUFTSixPQUFPLEVBQUVkLE1BQU07SUFDL0JaLHlFQUFjQSxDQUFDRyxrRUFBV0E7SUFDMUIsT0FBT08sZUFBZTtRQUNwQnFCLE9BQU9MO0lBQ1QsR0FBR2QsVUFBVSxDQUFDLEdBQUc7QUFDbkI7QUFFQSxTQUFTb0IsVUFBVU4sT0FBTyxFQUFFZCxNQUFNO0lBQ2hDWix5RUFBY0EsQ0FBQ0ksbUVBQVlBO0lBQzNCLE9BQU9NLGVBQWU7UUFDcEJ1QixRQUFRUDtJQUNWLEdBQUdkLFVBQVUsQ0FBQyxHQUFHO0FBQ25CO0FBRUEsU0FBU3NCLFFBQVFSLE9BQU8sRUFBRWQsTUFBTTtJQUM5QloseUVBQWNBLENBQUNLLGlFQUFVQTtJQUN6QixPQUFPSyxlQUFlO1FBQ3BCeUIsTUFBTVQ7SUFDUixHQUFHZCxVQUFVLENBQUMsR0FBRztBQUNuQjtBQUVBLFNBQVN3QixTQUFTVixPQUFPLEVBQUVkLE1BQU07SUFDL0JaLHlFQUFjQSxDQUFDTSxrRUFBV0E7SUFDMUIsT0FBT0ksZUFBZTtRQUNwQjJCLE9BQU9YO0lBQ1QsR0FBR2QsVUFBVSxDQUFDLEdBQUc7QUFDbkI7QUFFQSxTQUFTMEIsaUJBQWlCQyxPQUFPO0lBQy9CQSxRQUFRQyxPQUFPLENBQUN4QyxxRUFBY0E7SUFDOUIsT0FBTyxTQUFTeUMsV0FBV0MsU0FBUyxFQUFFQyxPQUFPO1FBQzNDLE1BQU0sRUFDSmhDLFFBQVEsRUFDUkcsY0FBYyxFQUNkRixNQUFNLEVBQ1AsR0FBR0gsc0VBQW1CQSxDQUFDaUMsV0FBV0MsV0FBVyxDQUFDO1FBQy9DLE9BQU9qQyxlQUFlQyxVQUFVQyxRQUFRWSxXQUFXVjtJQUNyRDtBQUNGO0FBRUEsU0FBUzJCLFdBQVc5QixRQUFRLEVBQUVDLE1BQU07SUFDbEMsTUFBTWdDLE9BQU9OLGlCQUFpQjtRQUFDckMsaUVBQVVBO1FBQUVDLGtFQUFXQTtRQUFFRSxtRUFBWUE7UUFBRUQsa0VBQVdBO1FBQUVFLGlFQUFVQTtRQUFFQyxrRUFBV0E7S0FBQztJQUMzRyxPQUFPc0MsS0FBS2pDLFVBQVVDLFVBQVUsQ0FBQztBQUNuQztBQUVtRyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy1jcmVkaXQtY2FyZC1hcHAvLi9ub2RlX21vZHVsZXMvQHVzZS1nZXN0dXJlL3JlYWN0L2Rpc3QvdXNlLWdlc3R1cmUtcmVhY3QuZXNtLmpzPzc4MzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVnaXN0ZXJBY3Rpb24sIGRyYWdBY3Rpb24sIHBpbmNoQWN0aW9uLCB3aGVlbEFjdGlvbiwgc2Nyb2xsQWN0aW9uLCBtb3ZlQWN0aW9uLCBob3ZlckFjdGlvbiB9IGZyb20gJ0B1c2UtZ2VzdHVyZS9jb3JlL2FjdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnQHVzZS1nZXN0dXJlL2NvcmUvYWN0aW9ucyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udHJvbGxlciwgcGFyc2VNZXJnZWRIYW5kbGVycyB9IGZyb20gJ0B1c2UtZ2VzdHVyZS9jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B1c2UtZ2VzdHVyZS9jb3JlL3V0aWxzJztcbmV4cG9ydCAqIGZyb20gJ0B1c2UtZ2VzdHVyZS9jb3JlL3R5cGVzJztcblxuZnVuY3Rpb24gdXNlUmVjb2duaXplcnMoaGFuZGxlcnMsIGNvbmZpZyA9IHt9LCBnZXN0dXJlS2V5LCBuYXRpdmVIYW5kbGVycykge1xuICBjb25zdCBjdHJsID0gUmVhY3QudXNlTWVtbygoKSA9PiBuZXcgQ29udHJvbGxlcihoYW5kbGVycyksIFtdKTtcbiAgY3RybC5hcHBseUhhbmRsZXJzKGhhbmRsZXJzLCBuYXRpdmVIYW5kbGVycyk7XG4gIGN0cmwuYXBwbHlDb25maWcoY29uZmlnLCBnZXN0dXJlS2V5KTtcbiAgUmVhY3QudXNlRWZmZWN0KGN0cmwuZWZmZWN0LmJpbmQoY3RybCkpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBjdHJsLmNsZWFuLmJpbmQoY3RybCk7XG4gIH0sIFtdKTtcbiAgaWYgKGNvbmZpZy50YXJnZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjdHJsLmJpbmQuYmluZChjdHJsKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB1c2VEcmFnKGhhbmRsZXIsIGNvbmZpZykge1xuICByZWdpc3RlckFjdGlvbihkcmFnQWN0aW9uKTtcbiAgcmV0dXJuIHVzZVJlY29nbml6ZXJzKHtcbiAgICBkcmFnOiBoYW5kbGVyXG4gIH0sIGNvbmZpZyB8fCB7fSwgJ2RyYWcnKTtcbn1cblxuZnVuY3Rpb24gdXNlUGluY2goaGFuZGxlciwgY29uZmlnKSB7XG4gIHJlZ2lzdGVyQWN0aW9uKHBpbmNoQWN0aW9uKTtcbiAgcmV0dXJuIHVzZVJlY29nbml6ZXJzKHtcbiAgICBwaW5jaDogaGFuZGxlclxuICB9LCBjb25maWcgfHwge30sICdwaW5jaCcpO1xufVxuXG5mdW5jdGlvbiB1c2VXaGVlbChoYW5kbGVyLCBjb25maWcpIHtcbiAgcmVnaXN0ZXJBY3Rpb24od2hlZWxBY3Rpb24pO1xuICByZXR1cm4gdXNlUmVjb2duaXplcnMoe1xuICAgIHdoZWVsOiBoYW5kbGVyXG4gIH0sIGNvbmZpZyB8fCB7fSwgJ3doZWVsJyk7XG59XG5cbmZ1bmN0aW9uIHVzZVNjcm9sbChoYW5kbGVyLCBjb25maWcpIHtcbiAgcmVnaXN0ZXJBY3Rpb24oc2Nyb2xsQWN0aW9uKTtcbiAgcmV0dXJuIHVzZVJlY29nbml6ZXJzKHtcbiAgICBzY3JvbGw6IGhhbmRsZXJcbiAgfSwgY29uZmlnIHx8IHt9LCAnc2Nyb2xsJyk7XG59XG5cbmZ1bmN0aW9uIHVzZU1vdmUoaGFuZGxlciwgY29uZmlnKSB7XG4gIHJlZ2lzdGVyQWN0aW9uKG1vdmVBY3Rpb24pO1xuICByZXR1cm4gdXNlUmVjb2duaXplcnMoe1xuICAgIG1vdmU6IGhhbmRsZXJcbiAgfSwgY29uZmlnIHx8IHt9LCAnbW92ZScpO1xufVxuXG5mdW5jdGlvbiB1c2VIb3ZlcihoYW5kbGVyLCBjb25maWcpIHtcbiAgcmVnaXN0ZXJBY3Rpb24oaG92ZXJBY3Rpb24pO1xuICByZXR1cm4gdXNlUmVjb2duaXplcnMoe1xuICAgIGhvdmVyOiBoYW5kbGVyXG4gIH0sIGNvbmZpZyB8fCB7fSwgJ2hvdmVyJyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZUdlc3R1cmUoYWN0aW9ucykge1xuICBhY3Rpb25zLmZvckVhY2gocmVnaXN0ZXJBY3Rpb24pO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlR2VzdHVyZShfaGFuZGxlcnMsIF9jb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBoYW5kbGVycyxcbiAgICAgIG5hdGl2ZUhhbmRsZXJzLFxuICAgICAgY29uZmlnXG4gICAgfSA9IHBhcnNlTWVyZ2VkSGFuZGxlcnMoX2hhbmRsZXJzLCBfY29uZmlnIHx8IHt9KTtcbiAgICByZXR1cm4gdXNlUmVjb2duaXplcnMoaGFuZGxlcnMsIGNvbmZpZywgdW5kZWZpbmVkLCBuYXRpdmVIYW5kbGVycyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZUdlc3R1cmUoaGFuZGxlcnMsIGNvbmZpZykge1xuICBjb25zdCBob29rID0gY3JlYXRlVXNlR2VzdHVyZShbZHJhZ0FjdGlvbiwgcGluY2hBY3Rpb24sIHNjcm9sbEFjdGlvbiwgd2hlZWxBY3Rpb24sIG1vdmVBY3Rpb24sIGhvdmVyQWN0aW9uXSk7XG4gIHJldHVybiBob29rKGhhbmRsZXJzLCBjb25maWcgfHwge30pO1xufVxuXG5leHBvcnQgeyBjcmVhdGVVc2VHZXN0dXJlLCB1c2VEcmFnLCB1c2VHZXN0dXJlLCB1c2VIb3ZlciwgdXNlTW92ZSwgdXNlUGluY2gsIHVzZVNjcm9sbCwgdXNlV2hlZWwgfTtcbiJdLCJuYW1lcyI6WyJyZWdpc3RlckFjdGlvbiIsImRyYWdBY3Rpb24iLCJwaW5jaEFjdGlvbiIsIndoZWVsQWN0aW9uIiwic2Nyb2xsQWN0aW9uIiwibW92ZUFjdGlvbiIsImhvdmVyQWN0aW9uIiwiUmVhY3QiLCJDb250cm9sbGVyIiwicGFyc2VNZXJnZWRIYW5kbGVycyIsInVzZVJlY29nbml6ZXJzIiwiaGFuZGxlcnMiLCJjb25maWciLCJnZXN0dXJlS2V5IiwibmF0aXZlSGFuZGxlcnMiLCJjdHJsIiwidXNlTWVtbyIsImFwcGx5SGFuZGxlcnMiLCJhcHBseUNvbmZpZyIsInVzZUVmZmVjdCIsImVmZmVjdCIsImJpbmQiLCJjbGVhbiIsInRhcmdldCIsInVuZGVmaW5lZCIsInVzZURyYWciLCJoYW5kbGVyIiwiZHJhZyIsInVzZVBpbmNoIiwicGluY2giLCJ1c2VXaGVlbCIsIndoZWVsIiwidXNlU2Nyb2xsIiwic2Nyb2xsIiwidXNlTW92ZSIsIm1vdmUiLCJ1c2VIb3ZlciIsImhvdmVyIiwiY3JlYXRlVXNlR2VzdHVyZSIsImFjdGlvbnMiLCJmb3JFYWNoIiwidXNlR2VzdHVyZSIsIl9oYW5kbGVycyIsIl9jb25maWciLCJob29rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@use-gesture/react/dist/use-gesture-react.esm.js\n");

/***/ })

};
;