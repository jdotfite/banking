"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-use-gesture";
exports.ids = ["vendor-chunks/react-use-gesture"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-use-gesture/dist/react-use-gesture.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-use-gesture/dist/react-use-gesture.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addV: () => (/* binding */ addV),\n/* harmony export */   rubberbandIfOutOfBounds: () => (/* binding */ rubberbandIfOutOfBounds),\n/* harmony export */   subV: () => (/* binding */ subV),\n/* harmony export */   useDrag: () => (/* binding */ useDrag),\n/* harmony export */   useGesture: () => (/* binding */ useGesture),\n/* harmony export */   useHover: () => (/* binding */ useHover),\n/* harmony export */   useMove: () => (/* binding */ useMove),\n/* harmony export */   usePinch: () => (/* binding */ usePinch),\n/* harmony export */   useScroll: () => (/* binding */ useScroll),\n/* harmony export */   useWheel: () => (/* binding */ useWheel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// vector add\nfunction addV(v1, v2) {\n    return v1.map(function(v, i) {\n        return v + v2[i];\n    });\n} // vector substract\nfunction subV(v1, v2) {\n    return v1.map(function(v, i) {\n        return v - v2[i];\n    });\n}\n/**\r\n * Calculates distance\r\n * @param movement the difference between current and initial vectors\r\n * @returns distance\r\n */ function calculateDistance(movement) {\n    return Math.hypot.apply(Math, movement);\n}\nfunction calculateAllGeometry(movement, delta) {\n    if (delta === void 0) {\n        delta = movement;\n    }\n    var dl = calculateDistance(delta);\n    var alpha = dl === 0 ? 0 : 1 / dl;\n    var direction = delta.map(function(v) {\n        return alpha * v;\n    });\n    var distance = calculateDistance(movement);\n    return {\n        distance: distance,\n        direction: direction\n    };\n}\n/**\r\n * Calculates all kinematics\r\n * @template T the expected vector type\r\n * @param movement the difference between current and initial vectors\r\n * @param delta the difference between current and previous vectors\r\n * @param delta_t the time difference between current and previous timestamps\r\n * @returns all kinematics\r\n */ function calculateAllKinematics(movement, delta, dt) {\n    var dl = calculateDistance(delta);\n    var alpha = dl === 0 ? 0 : 1 / dl;\n    var beta = dt === 0 ? 0 : 1 / dt;\n    var velocity = beta * dl;\n    var velocities = delta.map(function(v) {\n        return beta * v;\n    });\n    var direction = delta.map(function(v) {\n        return alpha * v;\n    });\n    var distance = calculateDistance(movement);\n    return {\n        velocities: velocities,\n        velocity: velocity,\n        distance: distance,\n        direction: direction\n    };\n}\n/**\r\n * Because IE doesn't support `Math.sign` function, so we use the polyfill version of the function.\r\n * This polyfill function is suggested by Mozilla:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign#Polyfill\r\n * @param x target number\r\n */ function sign(x) {\n    if (Math.sign) return Math.sign(x);\n    return Number(x > 0) - Number(x < 0) || +x;\n}\nfunction minMax(value, min, max) {\n    return Math.max(min, Math.min(value, max));\n} // Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\nfunction rubberband2(distance, constant) {\n    // default constant from the article is 0.7\n    return Math.pow(distance, constant * 5);\n}\nfunction rubberband(distance, dimension, constant) {\n    if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant);\n    return distance * dimension * constant / (dimension + constant * distance);\n}\nfunction rubberbandIfOutOfBounds(position, min, max, constant) {\n    if (constant === void 0) {\n        constant = 0.15;\n    }\n    if (constant === 0) return minMax(position, min, max);\n    if (position < min) return -rubberband(min - position, max - min, constant) + min;\n    if (position > max) return +rubberband(position - max, max - min, constant) + max;\n    return position;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n    var it;\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            return function() {\n                if (i >= o.length) return {\n                    done: true\n                };\n                return {\n                    done: false,\n                    value: o[i++]\n                };\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    it = o[Symbol.iterator]();\n    return it.next.bind(it);\n}\nfunction noop() {}\n/**\r\n * TODO Beware that only optimized cases are covered in tests =)\r\n * TODO Need to cover general case as well\r\n *\r\n * @param fns\r\n */ function chainFns() {\n    for(var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++){\n        fns[_key] = arguments[_key];\n    }\n    if (fns.length === 0) return noop;\n    if (fns.length === 1) return fns[0];\n    return function() {\n        var result;\n        for(var _iterator = _createForOfIteratorHelperLoose(fns), _step; !(_step = _iterator()).done;){\n            var fn = _step.value;\n            result = fn.apply(this, arguments) || result;\n        }\n        return result;\n    };\n}\n/**\r\n * Expects a simple value or 2D vector (an array with 2 elements) and\r\n * always returns 2D vector. If simple value is passed, returns a\r\n * vector with this value as both coordinates.\r\n *\r\n * @param value\r\n */ function ensureVector(value, fallback) {\n    if (value === undefined) {\n        if (fallback === undefined) {\n            throw new Error(\"Must define fallback value if undefined is expected\");\n        }\n        value = fallback;\n    }\n    if (Array.isArray(value)) return value;\n    return [\n        value,\n        value\n    ];\n}\n/**\r\n * Helper for defining a default value\r\n *\r\n * @param value\r\n * @param fallback\r\n */ function assignDefault(value, fallback) {\n    return Object.assign({}, fallback, value || {});\n}\n/**\r\n * Resolves getters (functions) by calling them\r\n * If simple value is given it just passes through\r\n *\r\n * @param v\r\n */ function valueFn(v) {\n    if (typeof v === \"function\") {\n        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n            args[_key2 - 1] = arguments[_key2];\n        }\n        // @ts-ignore\n        return v.apply(void 0, args);\n    } else {\n        return v;\n    }\n}\nfunction resolveWith(config, resolvers) {\n    if (config === void 0) {\n        config = {};\n    }\n    var result = {};\n    for(var _i = 0, _Object$entries = Object.entries(resolvers); _i < _Object$entries.length; _i++){\n        var _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], resolver = _Object$entries$_i[1];\n        switch(typeof resolver){\n            case \"function\":\n                result[key] = resolver.call(result, config[key], key, config);\n                break;\n            case \"object\":\n                result[key] = resolveWith(config[key], resolver);\n                break;\n            case \"boolean\":\n                if (resolver) result[key] = config[key];\n                break;\n        }\n    }\n    return result;\n}\nvar DEFAULT_DRAG_DELAY = 180;\nvar DEFAULT_RUBBERBAND = 0.15;\nvar DEFAULT_SWIPE_VELOCITY = 0.5;\nvar DEFAULT_SWIPE_DISTANCE = 60;\nvar InternalGestureOptionsNormalizers = {\n    threshold: function threshold(value) {\n        if (value === void 0) {\n            value = 0;\n        }\n        return ensureVector(value);\n    },\n    rubberband: function rubberband(value) {\n        if (value === void 0) {\n            value = 0;\n        }\n        switch(value){\n            case true:\n                return ensureVector(DEFAULT_RUBBERBAND);\n            case false:\n                return ensureVector(0);\n            default:\n                return ensureVector(value);\n        }\n    },\n    enabled: function enabled(value) {\n        if (value === void 0) {\n            value = true;\n        }\n        return value;\n    },\n    triggerAllEvents: function triggerAllEvents(value) {\n        if (value === void 0) {\n            value = false;\n        }\n        return value;\n    },\n    initial: function initial(value) {\n        if (value === void 0) {\n            value = 0;\n        }\n        if (typeof value === \"function\") return value;\n        return ensureVector(value);\n    }\n};\nvar InternalCoordinatesOptionsNormalizers = /*#__PURE__*/ _extends({}, InternalGestureOptionsNormalizers, {\n    axis: true,\n    lockDirection: function lockDirection(value) {\n        if (value === void 0) {\n            value = false;\n        }\n        return value;\n    },\n    bounds: function bounds(value) {\n        if (value === void 0) {\n            value = {};\n        }\n        if (typeof value === \"function\") return function(state) {\n            return InternalCoordinatesOptionsNormalizers.bounds(value(state));\n        };\n        var _value2 = value, _value2$left = _value2.left, left = _value2$left === void 0 ? -Infinity : _value2$left, _value2$right = _value2.right, right = _value2$right === void 0 ? Infinity : _value2$right, _value2$top = _value2.top, top = _value2$top === void 0 ? -Infinity : _value2$top, _value2$bottom = _value2.bottom, bottom = _value2$bottom === void 0 ? Infinity : _value2$bottom;\n        return [\n            [\n                left,\n                right\n            ],\n            [\n                top,\n                bottom\n            ]\n        ];\n    }\n});\nvar isBrowser =  false && 0;\nvar InternalGenericOptionsNormalizers = {\n    enabled: function enabled(value) {\n        if (value === void 0) {\n            value = true;\n        }\n        return value;\n    },\n    domTarget: true,\n    window: /*#__PURE__*/ function(_window) {\n        function window1(_x) {\n            return _window.apply(this, arguments);\n        }\n        window1.toString = function() {\n            return _window.toString();\n        };\n        return window1;\n    }(function(value) {\n        if (value === void 0) {\n            value = isBrowser ? window : undefined;\n        }\n        return value;\n    }),\n    eventOptions: function eventOptions(_temp) {\n        var _ref = _temp === void 0 ? {} : _temp, _ref$passive = _ref.passive, passive = _ref$passive === void 0 ? true : _ref$passive, _ref$capture = _ref.capture, capture = _ref$capture === void 0 ? false : _ref$capture;\n        return {\n            passive: passive,\n            capture: capture\n        };\n    }\n};\nvar InternalDistanceAngleOptionsNormalizers = /*#__PURE__*/ _extends({}, InternalGestureOptionsNormalizers, {\n    bounds: function bounds(_value, _key, _ref2) {\n        var _ref2$distanceBounds = _ref2.distanceBounds, distanceBounds = _ref2$distanceBounds === void 0 ? {} : _ref2$distanceBounds, _ref2$angleBounds = _ref2.angleBounds, angleBounds = _ref2$angleBounds === void 0 ? {} : _ref2$angleBounds;\n        var _distanceBounds = function _distanceBounds(state) {\n            var D = assignDefault(valueFn(distanceBounds, state), {\n                min: -Infinity,\n                max: Infinity\n            });\n            return [\n                D.min,\n                D.max\n            ];\n        };\n        var _angleBounds = function _angleBounds(state) {\n            var A = assignDefault(valueFn(angleBounds, state), {\n                min: -Infinity,\n                max: Infinity\n            });\n            return [\n                A.min,\n                A.max\n            ];\n        };\n        if (typeof distanceBounds !== \"function\" && typeof angleBounds !== \"function\") return [\n            _distanceBounds(),\n            _angleBounds()\n        ];\n        return function(state) {\n            return [\n                _distanceBounds(state),\n                _angleBounds(state)\n            ];\n        };\n    }\n});\nvar InternalDragOptionsNormalizers = /*#__PURE__*/ _extends({}, InternalCoordinatesOptionsNormalizers, {\n    threshold: function threshold(v, _k, _ref3) {\n        var _ref3$filterTaps = _ref3.filterTaps, filterTaps = _ref3$filterTaps === void 0 ? false : _ref3$filterTaps, _ref3$lockDirection = _ref3.lockDirection, lockDirection = _ref3$lockDirection === void 0 ? false : _ref3$lockDirection, _ref3$axis = _ref3.axis, axis = _ref3$axis === void 0 ? undefined : _ref3$axis;\n        var A = ensureVector(v, filterTaps ? 3 : lockDirection ? 1 : axis ? 1 : 0);\n        this.filterTaps = filterTaps || A[0] + A[1] > 0;\n        return A;\n    },\n    swipeVelocity: function swipeVelocity(v) {\n        if (v === void 0) {\n            v = DEFAULT_SWIPE_VELOCITY;\n        }\n        return ensureVector(v);\n    },\n    swipeDistance: function swipeDistance(v) {\n        if (v === void 0) {\n            v = DEFAULT_SWIPE_DISTANCE;\n        }\n        return ensureVector(v);\n    },\n    delay: function delay(value) {\n        if (value === void 0) {\n            value = 0;\n        }\n        switch(value){\n            case true:\n                return DEFAULT_DRAG_DELAY;\n            case false:\n                return 0;\n            default:\n                return value;\n        }\n    }\n});\nfunction getInternalGenericOptions(config) {\n    if (config === void 0) {\n        config = {};\n    }\n    // TODO warn when passive is set to true and domTarget is undefined\n    return resolveWith(config, InternalGenericOptionsNormalizers);\n}\nfunction getInternalCoordinatesOptions(config) {\n    if (config === void 0) {\n        config = {};\n    }\n    return resolveWith(config, InternalCoordinatesOptionsNormalizers);\n}\nfunction getInternalDistanceAngleOptions(config) {\n    if (config === void 0) {\n        config = {};\n    }\n    return resolveWith(config, InternalDistanceAngleOptionsNormalizers);\n}\nfunction getInternalDragOptions(config) {\n    if (config === void 0) {\n        config = {};\n    }\n    return resolveWith(config, InternalDragOptionsNormalizers);\n}\nfunction _buildMoveConfig(_ref) {\n    var domTarget = _ref.domTarget, eventOptions = _ref.eventOptions, window1 = _ref.window, enabled = _ref.enabled, rest = _objectWithoutPropertiesLoose(_ref, [\n        \"domTarget\",\n        \"eventOptions\",\n        \"window\",\n        \"enabled\"\n    ]);\n    var opts = getInternalGenericOptions({\n        domTarget: domTarget,\n        eventOptions: eventOptions,\n        window: window1,\n        enabled: enabled\n    });\n    opts.move = getInternalCoordinatesOptions(rest);\n    return opts;\n}\nfunction _buildHoverConfig(_ref2) {\n    var domTarget = _ref2.domTarget, eventOptions = _ref2.eventOptions, window1 = _ref2.window, enabled = _ref2.enabled, rest = _objectWithoutPropertiesLoose(_ref2, [\n        \"domTarget\",\n        \"eventOptions\",\n        \"window\",\n        \"enabled\"\n    ]);\n    var opts = getInternalGenericOptions({\n        domTarget: domTarget,\n        eventOptions: eventOptions,\n        window: window1,\n        enabled: enabled\n    });\n    opts.hover = _extends({\n        enabled: true\n    }, rest);\n    return opts;\n}\nfunction _buildDragConfig(_ref3) {\n    var domTarget = _ref3.domTarget, eventOptions = _ref3.eventOptions, window1 = _ref3.window, enabled = _ref3.enabled, rest = _objectWithoutPropertiesLoose(_ref3, [\n        \"domTarget\",\n        \"eventOptions\",\n        \"window\",\n        \"enabled\"\n    ]);\n    var opts = getInternalGenericOptions({\n        domTarget: domTarget,\n        eventOptions: eventOptions,\n        window: window1,\n        enabled: enabled\n    });\n    opts.drag = getInternalDragOptions(rest);\n    return opts;\n}\nfunction _buildPinchConfig(_ref4) {\n    var domTarget = _ref4.domTarget, eventOptions = _ref4.eventOptions, window1 = _ref4.window, enabled = _ref4.enabled, rest = _objectWithoutPropertiesLoose(_ref4, [\n        \"domTarget\",\n        \"eventOptions\",\n        \"window\",\n        \"enabled\"\n    ]);\n    var opts = getInternalGenericOptions({\n        domTarget: domTarget,\n        eventOptions: eventOptions,\n        window: window1,\n        enabled: enabled\n    });\n    opts.pinch = getInternalDistanceAngleOptions(rest);\n    return opts;\n}\nfunction _buildScrollConfig(_ref5) {\n    var domTarget = _ref5.domTarget, eventOptions = _ref5.eventOptions, window1 = _ref5.window, enabled = _ref5.enabled, rest = _objectWithoutPropertiesLoose(_ref5, [\n        \"domTarget\",\n        \"eventOptions\",\n        \"window\",\n        \"enabled\"\n    ]);\n    var opts = getInternalGenericOptions({\n        domTarget: domTarget,\n        eventOptions: eventOptions,\n        window: window1,\n        enabled: enabled\n    });\n    opts.scroll = getInternalCoordinatesOptions(rest);\n    return opts;\n}\nfunction _buildWheelConfig(_ref6) {\n    var domTarget = _ref6.domTarget, eventOptions = _ref6.eventOptions, window1 = _ref6.window, enabled = _ref6.enabled, rest = _objectWithoutPropertiesLoose(_ref6, [\n        \"domTarget\",\n        \"eventOptions\",\n        \"window\",\n        \"enabled\"\n    ]);\n    var opts = getInternalGenericOptions({\n        domTarget: domTarget,\n        eventOptions: eventOptions,\n        window: window1,\n        enabled: enabled\n    });\n    opts.wheel = getInternalCoordinatesOptions(rest);\n    return opts;\n}\nfunction buildComplexConfig(config, actions) {\n    if (config === void 0) {\n        config = {};\n    }\n    if (actions === void 0) {\n        actions = new Set();\n    }\n    var _config = config, drag = _config.drag, wheel = _config.wheel, move = _config.move, scroll = _config.scroll, pinch = _config.pinch, hover = _config.hover, eventOptions = _config.eventOptions, window1 = _config.window, domTarget = _config.domTarget, enabled = _config.enabled;\n    var mergedConfig = getInternalGenericOptions({\n        eventOptions: eventOptions,\n        window: window1,\n        domTarget: domTarget,\n        enabled: enabled\n    });\n    if (actions.has(\"onDrag\")) mergedConfig.drag = getInternalDragOptions(drag);\n    if (actions.has(\"onWheel\")) mergedConfig.wheel = getInternalCoordinatesOptions(wheel);\n    if (actions.has(\"onScroll\")) mergedConfig.scroll = getInternalCoordinatesOptions(scroll);\n    if (actions.has(\"onMove\")) mergedConfig.move = getInternalCoordinatesOptions(move);\n    if (actions.has(\"onPinch\")) mergedConfig.pinch = getInternalDistanceAngleOptions(pinch);\n    if (actions.has(\"onHover\")) mergedConfig.hover = _extends({\n        enabled: true\n    }, hover);\n    return mergedConfig;\n}\nfunction getInitial(mixed) {\n    return _extends({\n        _active: false,\n        _blocked: false,\n        _intentional: [\n            false,\n            false\n        ],\n        _movement: [\n            0,\n            0\n        ],\n        _initial: [\n            0,\n            0\n        ],\n        _bounds: [\n            [\n                -Infinity,\n                Infinity\n            ],\n            [\n                -Infinity,\n                Infinity\n            ]\n        ],\n        _lastEventType: undefined,\n        event: undefined,\n        // currentTarget: undefined,\n        // pointerId: undefined,\n        intentional: false,\n        values: [\n            0,\n            0\n        ],\n        velocities: [\n            0,\n            0\n        ],\n        delta: [\n            0,\n            0\n        ],\n        movement: [\n            0,\n            0\n        ],\n        offset: [\n            0,\n            0\n        ],\n        lastOffset: [\n            0,\n            0\n        ],\n        direction: [\n            0,\n            0\n        ],\n        initial: [\n            0,\n            0\n        ],\n        previous: [\n            0,\n            0\n        ],\n        first: false,\n        last: false,\n        active: false,\n        timeStamp: 0,\n        startTime: 0,\n        elapsedTime: 0,\n        cancel: noop,\n        canceled: false,\n        memo: undefined,\n        args: undefined\n    }, mixed);\n}\nfunction getInitialState() {\n    var shared = {\n        hovering: false,\n        scrolling: false,\n        wheeling: false,\n        dragging: false,\n        moving: false,\n        pinching: false,\n        touches: 0,\n        buttons: 0,\n        down: false,\n        shiftKey: false,\n        altKey: false,\n        metaKey: false,\n        ctrlKey: false\n    };\n    var drag = getInitial({\n        axis: undefined,\n        xy: [\n            0,\n            0\n        ],\n        vxvy: [\n            0,\n            0\n        ],\n        velocity: 0,\n        distance: 0,\n        _isTap: true,\n        _delayedEvent: false,\n        _pointerId: undefined,\n        tap: false,\n        swipe: [\n            0,\n            0\n        ]\n    });\n    var pinch = getInitial({\n        da: [\n            0,\n            0\n        ],\n        vdva: [\n            0,\n            0\n        ],\n        // @ts-ignore origin can never be passed as undefined in userland\n        origin: undefined,\n        turns: 0\n    });\n    var wheel = getInitial({\n        axis: undefined,\n        xy: [\n            0,\n            0\n        ],\n        vxvy: [\n            0,\n            0\n        ],\n        velocity: 0,\n        distance: 0\n    });\n    var move = getInitial({\n        axis: undefined,\n        xy: [\n            0,\n            0\n        ],\n        vxvy: [\n            0,\n            0\n        ],\n        velocity: 0,\n        distance: 0\n    });\n    var scroll = getInitial({\n        axis: undefined,\n        xy: [\n            0,\n            0\n        ],\n        vxvy: [\n            0,\n            0\n        ],\n        velocity: 0,\n        distance: 0\n    });\n    return {\n        shared: shared,\n        drag: drag,\n        pinch: pinch,\n        wheel: wheel,\n        move: move,\n        scroll: scroll\n    };\n}\nvar RecognizersMap = /*#__PURE__*/ new Map();\n/**\r\n * @private\r\n * Recognizer abstract class.\r\n */ var Recognizer = /*#__PURE__*/ function() {\n    /**\r\n   * Creates an instance of a gesture recognizer.\r\n   * @param stateKey drag, move, pinch, etc.\r\n   * @param controller the controller attached to the gesture\r\n   * @param [args] the args that should be passed to the gesture handler\r\n   */ function Recognizer(controller, args) {\n        var _this = this;\n        if (args === void 0) {\n            args = [];\n        }\n        this.controller = controller;\n        this.args = args;\n        this.debounced = true; // Convenience method to set a timeout for a given gesture\n        this.setTimeout = function(callback, ms) {\n            var _window;\n            if (ms === void 0) {\n                ms = 140;\n            }\n            clearTimeout(_this.controller.timeouts[_this.stateKey]);\n            for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n                args[_key - 2] = arguments[_key];\n            }\n            _this.controller.timeouts[_this.stateKey] = (_window = window).setTimeout.apply(_window, [\n                callback,\n                ms\n            ].concat(args));\n        }; // Convenience method to clear a timeout for a given gesture\n        this.clearTimeout = function() {\n            clearTimeout(_this.controller.timeouts[_this.stateKey]);\n        };\n        /**\r\n     * Fires the gesture handler\r\n     */ this.fireGestureHandler = function(forceFlag) {\n            if (forceFlag === void 0) {\n                forceFlag = false;\n            }\n            /**\r\n       * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\r\n       * clean everything and don't do anything.\r\n       */ if (_this.state._blocked) {\n                // we need debounced gestures to end by themselves\n                if (!_this.debounced) {\n                    _this.state._active = false;\n                    _this.clean();\n                }\n                return null;\n            } // If the gesture has no intentional dimension, don't fire the handler.\n            if (!forceFlag && !_this.state.intentional && !_this.config.triggerAllEvents) return null;\n            if (_this.state.intentional) {\n                var prev_active = _this.state.active;\n                var next_active = _this.state._active;\n                _this.state.active = next_active;\n                _this.state.first = next_active && !prev_active;\n                _this.state.last = prev_active && !next_active;\n                _this.controller.state.shared[_this.ingKey] = next_active; // Sets dragging, pinching, etc. to the gesture active state\n            }\n            var state = _extends({}, _this.controller.state.shared, _this.state, _this.mapStateValues(_this.state)); // @ts-ignore\n            var newMemo = _this.handler(state); // Sets memo to the returned value of the handler (unless it's not undefined)\n            _this.state.memo = newMemo !== void 0 ? newMemo : _this.state.memo; // Cleans the gesture when the gesture is no longer active.\n            if (!_this.state._active) _this.clean();\n            return state;\n        };\n    } // Returns the gesture config\n    var _proto = Recognizer.prototype;\n    // Convenience method to update the shared state\n    _proto.updateSharedState = function updateSharedState(sharedState) {\n        Object.assign(this.controller.state.shared, sharedState);\n    } // Convenience method to update the gesture state\n    ;\n    _proto.updateGestureState = function updateGestureState(gestureState) {\n        Object.assign(this.state, gestureState);\n    } /**\r\n   * Returns state properties depending on the movement and state.\r\n   *\r\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\r\n   * below.\r\n   */ ;\n    _proto.checkIntentionality = function checkIntentionality(_intentional, _movement) {\n        return {\n            _intentional: _intentional,\n            _blocked: false\n        };\n    } /**\r\n   * Returns basic movement properties for the gesture based on the next values and current state.\r\n   */ ;\n    _proto.getMovement = function getMovement(values) {\n        var _this$config = this.config, initial = _this$config.initial, bounds = _this$config.bounds, rubberband = _this$config.rubberband, T = _this$config.threshold;\n        var _this$state = this.state, _bounds = _this$state._bounds, _initial = _this$state._initial, _active = _this$state._active, wasIntentional = _this$state._intentional, lastOffset = _this$state.lastOffset, prevMovement = _this$state.movement;\n        var M = this.getInternalMovement(values, this.state);\n        var i0 = wasIntentional[0] === false ? getIntentionalDisplacement(M[0], T[0]) : wasIntentional[0];\n        var i1 = wasIntentional[1] === false ? getIntentionalDisplacement(M[1], T[1]) : wasIntentional[1]; // Get gesture specific state properties based on intentionality and movement.\n        var intentionalityCheck = this.checkIntentionality([\n            i0,\n            i1\n        ], M);\n        if (intentionalityCheck._blocked) {\n            return _extends({}, intentionalityCheck, {\n                _movement: M,\n                delta: [\n                    0,\n                    0\n                ]\n            });\n        }\n        var _intentional = intentionalityCheck._intentional;\n        var _movement = M;\n        var __cachedBounds;\n        var __cachedInitial;\n        if (_intentional[0] !== false && wasIntentional[0] === false) {\n            __cachedInitial = valueFn(initial, this.state);\n            __cachedBounds = valueFn(bounds, this.state);\n            _initial[0] = __cachedInitial[0];\n            _bounds[0] = __cachedBounds[0];\n        }\n        if (_intentional[1] !== false && wasIntentional[1] === false) {\n            var _cachedInitial, _cachedBounds;\n            __cachedInitial = (_cachedInitial = __cachedInitial) != null ? _cachedInitial : valueFn(initial, this.state);\n            __cachedBounds = (_cachedBounds = __cachedBounds) != null ? _cachedBounds : valueFn(bounds, this.state);\n            _initial[1] = __cachedInitial[1];\n            _bounds[1] = __cachedBounds[1];\n        }\n        /**\r\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\r\n     * It is calculated from the actual movement minus the threshold.\r\n     */ var movement = [\n            _intentional[0] !== false ? M[0] - _intentional[0] : _initial[0],\n            _intentional[1] !== false ? M[1] - _intentional[1] : _initial[1]\n        ];\n        var offset = addV(movement, lastOffset);\n        /**\r\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\r\n     * and offset can return within their bounds.\r\n     */ var _rubberband = _active ? rubberband : [\n            0,\n            0\n        ];\n        movement = computeRubberband(_bounds, addV(movement, _initial), _rubberband);\n        return _extends({}, intentionalityCheck, {\n            intentional: _intentional[0] !== false || _intentional[1] !== false,\n            _initial: _initial,\n            _movement: _movement,\n            movement: movement,\n            values: values,\n            offset: computeRubberband(_bounds, offset, _rubberband),\n            delta: subV(movement, prevMovement)\n        });\n    } // Cleans the gesture. Can be overriden by gestures.\n    ;\n    _proto.clean = function clean() {\n        this.clearTimeout();\n    };\n    _createClass(Recognizer, [\n        {\n            key: \"config\",\n            get: function get() {\n                return this.controller.config[this.stateKey];\n            } // Is the gesture enabled\n        },\n        {\n            key: \"enabled\",\n            get: function get() {\n                return this.controller.config.enabled && this.config.enabled;\n            } // Returns the controller state for a given gesture\n        },\n        {\n            key: \"state\",\n            get: function get() {\n                return this.controller.state[this.stateKey];\n            } // Returns the gesture handler\n        },\n        {\n            key: \"handler\",\n            get: function get() {\n                return this.controller.handlers[this.stateKey];\n            }\n        }\n    ]);\n    return Recognizer;\n}(); //--------------------------------------------\nfunction getIntentionalDisplacement(movement, threshold) {\n    if (Math.abs(movement) >= threshold) {\n        return sign(movement) * threshold;\n    } else {\n        return false;\n    }\n}\nfunction computeRubberband(bounds, _ref, _ref2) {\n    var Vx = _ref[0], Vy = _ref[1];\n    var Rx = _ref2[0], Ry = _ref2[1];\n    var _bounds$ = bounds[0], X1 = _bounds$[0], X2 = _bounds$[1], _bounds$2 = bounds[1], Y1 = _bounds$2[0], Y2 = _bounds$2[1];\n    return [\n        rubberbandIfOutOfBounds(Vx, X1, X2, Rx),\n        rubberbandIfOutOfBounds(Vy, Y1, Y2, Ry)\n    ];\n}\n/**\r\n * Returns a generic, common payload for all gestures from an event.\r\n */ function getGenericPayload(_ref3, event, isStartEvent) {\n    var state = _ref3.state, args = _ref3.args;\n    var timeStamp = event.timeStamp, _lastEventType = event.type;\n    var previous = state.values;\n    var elapsedTime = isStartEvent ? 0 : timeStamp - state.startTime;\n    return {\n        _lastEventType: _lastEventType,\n        event: event,\n        timeStamp: timeStamp,\n        elapsedTime: elapsedTime,\n        args: args,\n        previous: previous\n    };\n}\n/**\r\n * Returns the reinitialized start state for the gesture.\r\n * Should be common to all gestures.\r\n */ function getStartGestureState(recognizer, values, event) {\n    var offset = recognizer.state.offset;\n    var startTime = event.timeStamp;\n    return _extends({}, getInitialState()[recognizer.stateKey], {\n        _active: true,\n        values: values,\n        initial: values,\n        offset: offset,\n        lastOffset: offset,\n        startTime: startTime\n    });\n}\nfunction partial(func, state) {\n    return function(event) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        // @ts-ignore\n        return func.call.apply(func, [\n            this,\n            _extends({}, state, {\n                event: event\n            })\n        ].concat(args));\n    };\n}\n/**\r\n * The controller will keep track of the state for all gestures and also keep\r\n * track of timeouts, and window listeners.\r\n */ var Controller = function Controller(classes) {\n    var _this = this;\n    this.classes = classes;\n    this.bind = function() {\n        var bindings = {};\n        for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n            args[_key2] = arguments[_key2];\n        }\n        for(var _iterator = _createForOfIteratorHelperLoose(_this.classes), _step; !(_step = _iterator()).done;){\n            var RecognizerClass = _step.value;\n            new RecognizerClass(_this, args).addBindings(bindings);\n        } // we also add event bindings for native handlers\n        for(var _i = 0, _Object$entries = Object.entries(_this.nativeRefs); _i < _Object$entries.length; _i++){\n            var _Object$entries$_i = _Object$entries[_i], event = _Object$entries$_i[0], handler = _Object$entries$_i[1];\n            addBindings(bindings, event, partial(handler, _extends({}, _this.state.shared, {\n                args: args\n            })));\n        }\n        if (_this.config.domTarget) {\n            // If config.domTarget is set we add event listeners to it and return the clean function.\n            return updateDomListeners(_this, bindings);\n        } else {\n            // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n            return getPropsListener(_this, bindings);\n        }\n    };\n    this.effect = function() {\n        if (_this.config.domTarget) _this.bind();\n        return _this.clean;\n    };\n    /**\r\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\r\n   */ this.clean = function() {\n        var domTarget = getDomTargetFromConfig(_this.config);\n        var eventOptions = _this.config.eventOptions;\n        if (domTarget) removeListeners(domTarget, takeAll(_this.domListeners), eventOptions);\n        Object.values(_this.timeouts).forEach(clearTimeout);\n        clearAllWindowListeners(_this);\n    };\n    this.state = getInitialState();\n    this.timeouts = {};\n    this.domListeners = [];\n    this.windowListeners = {};\n};\nfunction clearAllWindowListeners(controller) {\n    var _controller$config = controller.config, el = _controller$config.window, eventOptions = _controller$config.eventOptions, windowListeners = controller.windowListeners;\n    if (!el) return;\n    for(var stateKey in windowListeners){\n        var handlers = windowListeners[stateKey];\n        removeListeners(el, handlers, eventOptions);\n    }\n    controller.windowListeners = {};\n}\nfunction clearWindowListeners(_ref, stateKey) {\n    var config = _ref.config, windowListeners = _ref.windowListeners;\n    if (!config.window) return;\n    removeListeners(config.window, windowListeners[stateKey], config.eventOptions);\n    delete windowListeners[stateKey];\n}\nfunction updateWindowListeners(_ref2, stateKey, listeners) {\n    var config = _ref2.config, windowListeners = _ref2.windowListeners;\n    if (listeners === void 0) {\n        listeners = [];\n    }\n    if (!config.window) return;\n    removeListeners(config.window, windowListeners[stateKey], config.eventOptions);\n    addListeners(config.window, windowListeners[stateKey] = listeners, config.eventOptions);\n}\nfunction updateDomListeners(_ref3, bindings) {\n    var config = _ref3.config, domListeners = _ref3.domListeners;\n    var domTarget = getDomTargetFromConfig(config);\n    if (!domTarget) throw new Error(\"domTarget must be defined\");\n    var eventOptions = config.eventOptions;\n    removeListeners(domTarget, takeAll(domListeners), eventOptions);\n    for(var _i2 = 0, _Object$entries2 = Object.entries(bindings); _i2 < _Object$entries2.length; _i2++){\n        var _Object$entries2$_i = _Object$entries2[_i2], key = _Object$entries2$_i[0], fns = _Object$entries2$_i[1];\n        var name = key.slice(2).toLowerCase();\n        domListeners.push([\n            name,\n            chainFns.apply(void 0, fns)\n        ]);\n    }\n    addListeners(domTarget, domListeners, eventOptions);\n}\nfunction getPropsListener(_ref4, bindings) {\n    var config = _ref4.config;\n    var props = {};\n    var captureString = config.eventOptions.capture ? \"Capture\" : \"\";\n    for(var _i3 = 0, _Object$entries3 = Object.entries(bindings); _i3 < _Object$entries3.length; _i3++){\n        var _Object$entries3$_i = _Object$entries3[_i3], event = _Object$entries3$_i[0], fns = _Object$entries3$_i[1];\n        var fnsArray = Array.isArray(fns) ? fns : [\n            fns\n        ];\n        var key = event + captureString;\n        props[key] = chainFns.apply(void 0, fnsArray);\n    }\n    return props;\n}\nfunction takeAll(array) {\n    if (array === void 0) {\n        array = [];\n    }\n    return array.splice(0, array.length);\n}\nfunction getDomTargetFromConfig(_ref5) {\n    var domTarget = _ref5.domTarget;\n    return domTarget && \"current\" in domTarget ? domTarget.current : domTarget;\n}\n/**\r\n * bindings is an object which keys match ReactEventHandlerKeys.\r\n * Since a recognizer might want to bind a handler function to an event key already used by a previously\r\n * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\r\n * that key.\r\n */ function addBindings(bindings, name, fn) {\n    if (!bindings[name]) bindings[name] = [];\n    bindings[name].push(fn);\n}\nfunction addListeners(el, listeners, options) {\n    if (listeners === void 0) {\n        listeners = [];\n    }\n    if (options === void 0) {\n        options = {};\n    }\n    for(var _iterator2 = _createForOfIteratorHelperLoose(listeners), _step2; !(_step2 = _iterator2()).done;){\n        var _step2$value = _step2.value, eventName = _step2$value[0], eventHandler = _step2$value[1];\n        el.addEventListener(eventName, eventHandler, options);\n    }\n}\nfunction removeListeners(el, listeners, options) {\n    if (listeners === void 0) {\n        listeners = [];\n    }\n    if (options === void 0) {\n        options = {};\n    }\n    for(var _iterator3 = _createForOfIteratorHelperLoose(listeners), _step3; !(_step3 = _iterator3()).done;){\n        var _step3$value = _step3.value, eventName = _step3$value[0], eventHandler = _step3$value[1];\n        el.removeEventListener(eventName, eventHandler, options);\n    }\n}\n/* eslint-disable react-hooks/exhaustive-deps */ /**\r\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\r\n *\r\n * @param handlers\r\n * @param classes\r\n * @param config\r\n * @param nativeHandlers - native handlers such as onClick, onMouseDown, etc.\r\n */ function useRecognizers(handlers, config, nativeHandlers) {\n    if (nativeHandlers === void 0) {\n        nativeHandlers = {};\n    }\n    var classes = resolveClasses(handlers);\n    var controller = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo(function() {\n        return new Controller(classes);\n    }, []);\n    controller.config = config;\n    controller.handlers = handlers;\n    controller.nativeRefs = nativeHandlers;\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(controller.effect, []); // @ts-ignore\n    if (controller.config.domTarget) return deprecationNoticeForDomTarget; // @ts-ignore\n    return controller.bind;\n}\nfunction deprecationNoticeForDomTarget() {\n    if (true) {\n        console.warn(\"Deprecation notice: When the `domTarget` option is specified, you don't need to write `useEffect(bind, [bind])` anymore: event binding is now made handled internally to this lib.\\n\\nNext version won't return anything when `domTarget` is provided, therefore your code will break if you try to call `useEffect`.\");\n    }\n}\nfunction resolveClasses(internalHandlers) {\n    var classes = new Set();\n    if (internalHandlers.drag) classes.add(RecognizersMap.get(\"drag\"));\n    if (internalHandlers.wheel) classes.add(RecognizersMap.get(\"wheel\"));\n    if (internalHandlers.scroll) classes.add(RecognizersMap.get(\"scroll\"));\n    if (internalHandlers.move) classes.add(RecognizersMap.get(\"move\"));\n    if (internalHandlers.pinch) classes.add(RecognizersMap.get(\"pinch\"));\n    if (internalHandlers.hover) classes.add(RecognizersMap.get(\"hover\"));\n    return classes;\n}\n/**\r\n * @private\r\n * Abstract class for coordinates-based gesture recongizers\r\n */ var CoordinatesRecognizer = /*#__PURE__*/ function(_Recognizer) {\n    _inheritsLoose(CoordinatesRecognizer, _Recognizer);\n    function CoordinatesRecognizer() {\n        return _Recognizer.apply(this, arguments) || this;\n    }\n    var _proto = CoordinatesRecognizer.prototype;\n    /**\r\n   * Returns the real movement (without taking intentionality into acount)\r\n   */ _proto.getInternalMovement = function getInternalMovement(values, state) {\n        return subV(values, state.initial);\n    } /**\r\n   * In coordinates-based gesture, this function will detect the first intentional axis,\r\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\r\n   * if the first intentional axis doesn't match the specified axis in config.\r\n   */ ;\n    _proto.checkIntentionality = function checkIntentionality(_intentional, _movement) {\n        if (_intentional[0] === false && _intentional[1] === false) {\n            return {\n                _intentional: _intentional,\n                axis: this.state.axis\n            };\n        }\n        var _movement$map = _movement.map(Math.abs), absX = _movement$map[0], absY = _movement$map[1];\n        var axis = this.state.axis || (absX > absY ? \"x\" : absX < absY ? \"y\" : undefined);\n        if (!this.config.axis && !this.config.lockDirection) return {\n            _intentional: _intentional,\n            _blocked: false,\n            axis: axis\n        };\n        if (!axis) return {\n            _intentional: [\n                false,\n                false\n            ],\n            _blocked: false,\n            axis: axis\n        };\n        if (!!this.config.axis && axis !== this.config.axis) return {\n            _intentional: _intentional,\n            _blocked: true,\n            axis: axis\n        };\n        _intentional[axis === \"x\" ? 1 : 0] = false;\n        return {\n            _intentional: _intentional,\n            _blocked: false,\n            axis: axis\n        };\n    };\n    _proto.getKinematics = function getKinematics(values, event) {\n        var state = this.getMovement(values);\n        if (!state._blocked) {\n            var dt = event.timeStamp - this.state.timeStamp;\n            Object.assign(state, calculateAllKinematics(state.movement, state.delta, dt));\n        }\n        return state;\n    };\n    _proto.mapStateValues = function mapStateValues(state) {\n        return {\n            xy: state.values,\n            vxvy: state.velocities\n        };\n    };\n    return CoordinatesRecognizer;\n}(Recognizer);\nvar WEBKIT_DISTANCE_SCALE_FACTOR = 260;\n/**\r\n * Whether the browser supports GestureEvent (ie Safari)\r\n * @returns true if the browser supports gesture event\r\n */ function supportsGestureEvents() {\n    try {\n        // TODO [TS] possibly find GestureEvent definitions?\n        // @ts-ignore: no type definitions for webkit GestureEvents\n        return \"constructor\" in GestureEvent;\n    } catch (e) {\n        return false;\n    }\n}\nfunction supportsTouchEvents() {\n    return  false && 0;\n}\nfunction getTouchEvents(event) {\n    if (\"touches\" in event) {\n        var targetTouches = event.targetTouches, changedTouches = event.changedTouches;\n        return targetTouches.length > 0 ? targetTouches : changedTouches;\n    }\n    return null;\n}\nfunction getGenericEventData(event) {\n    var buttons = \"buttons\" in event ? event.buttons : 0;\n    var touchEvents = getTouchEvents(event);\n    var touches = touchEvents && touchEvents.length || 0;\n    var down = touches > 0 || buttons > 0;\n    var shiftKey = event.shiftKey, altKey = event.altKey, metaKey = event.metaKey, ctrlKey = event.ctrlKey; // TODO check if this might create some overrides?\n    return {\n        touches: touches,\n        down: down,\n        buttons: buttons,\n        shiftKey: shiftKey,\n        altKey: altKey,\n        metaKey: metaKey,\n        ctrlKey: ctrlKey\n    };\n}\n/**\r\n * Gets pointer event values.\r\n * @param event\r\n * @returns pointer event values\r\n */ function getPointerEventValues(event) {\n    var touchEvents = getTouchEvents(event);\n    var _ref = touchEvents ? touchEvents[0] : event, clientX = _ref.clientX, clientY = _ref.clientY;\n    return [\n        clientX,\n        clientY\n    ];\n}\n/**\r\n * Gets scroll event values\r\n * @param event\r\n * @returns scroll event values\r\n */ function getScrollEventValues(event) {\n    // If the currentTarget is the window then we return the scrollX/Y position.\n    // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n    var _event$currentTarget = event.currentTarget, scrollX = _event$currentTarget.scrollX, scrollY = _event$currentTarget.scrollY, scrollLeft = _event$currentTarget.scrollLeft, scrollTop = _event$currentTarget.scrollTop;\n    return [\n        scrollX || scrollLeft || 0,\n        scrollY || scrollTop || 0\n    ];\n}\n/**\r\n * Gets wheel event values.\r\n * @param event\r\n * @returns wheel event values\r\n */ function getWheelEventValues(event) {\n    var deltaX = event.deltaX, deltaY = event.deltaY; //TODO implement polyfill ?\n    // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n    return [\n        deltaX,\n        deltaY\n    ];\n}\n/**\r\n * Gets webkit gesture event values.\r\n * @param event\r\n * @returns webkit gesture event values\r\n */ function getWebkitGestureEventValues(event) {\n    return [\n        event.scale * WEBKIT_DISTANCE_SCALE_FACTOR,\n        event.rotation\n    ];\n}\n/**\r\n * Gets two touches event data\r\n * @param event\r\n * @returns two touches event data\r\n */ function getTwoTouchesEventData(event) {\n    var _e$rotation;\n    var targetTouches = event.targetTouches;\n    var A = targetTouches[0], B = targetTouches[1];\n    var dx = B.clientX - A.clientX;\n    var dy = B.clientY - A.clientY;\n    var cx = (B.clientX + A.clientX) / 2;\n    var cy = (B.clientY + A.clientY) / 2;\n    var e = \"nativeEvent\" in event ? event.nativeEvent : event;\n    var distance = Math.hypot(dx, dy);\n    var angle = (_e$rotation = e.rotation) != null ? _e$rotation : -(Math.atan2(dx, dy) * 180) / Math.PI;\n    var values = [\n        distance,\n        angle\n    ];\n    var origin = [\n        cx,\n        cy\n    ];\n    return {\n        values: values,\n        origin: origin\n    };\n}\nvar TAP_DISTANCE_THRESHOLD = 3;\nvar SWIPE_MAX_ELAPSED_TIME = 220;\nvar DragRecognizer = /*#__PURE__*/ function(_CoordinatesRecognize) {\n    _inheritsLoose(DragRecognizer, _CoordinatesRecognize);\n    function DragRecognizer() {\n        var _this;\n        _this = _CoordinatesRecognize.apply(this, arguments) || this;\n        _this.ingKey = \"dragging\";\n        _this.stateKey = \"drag\";\n        /**\r\n     * TODO add back when setPointerCapture is widely wupported\r\n     * https://caniuse.com/#search=setPointerCapture\r\n     * private setPointers = (event: UseGestureEvent<PointerEvent>) => {\r\n     *   const { currentTarget, pointerId } = event\r\n     *   if (currentTarget) currentTarget.setPointerCapture(pointerId)\r\n     *   this.updateGestureState({ currentTarget, pointerId })\r\n     * }\r\n            * private removePointers = () => {\r\n     *   const { currentTarget, pointerId } = this.state\r\n     *   if (currentTarget && pointerId) currentTarget.releasePointerCapture(pointerId)\r\n     * }\r\n     */ _this.onDragStart = function(event) {\n            if (!_this.enabled || _this.state._active) return;\n            /**\r\n       * TODO add back when setPointerCapture is widely supported\r\n       * this.setPointers(event as PointerEvent)\r\n       */ updateWindowListeners(_this.controller, _this.stateKey, [\n                [\n                    \"pointermove\",\n                    _this.onDragChange\n                ],\n                [\n                    \"pointerup\",\n                    _this.onDragEnd\n                ],\n                [\n                    \"pointercancel\",\n                    _this.onDragEnd\n                ]\n            ]); // We set the state pointerId to the event.pointerId so we can make sure\n            // that we lock the drag to the event initiating the gesture\n            _this.updateGestureState({\n                _pointerId: event.pointerId\n            });\n            if (_this.config.delay > 0) {\n                _this.state._delayedEvent = true; // If it's a React SyntheticEvent we need to persist it so that we can use it async\n                if (\"persist\" in event && typeof event.persist === \"function\") event.persist();\n                _this.setTimeout(_this.startDrag.bind(_assertThisInitialized(_this)), _this.config.delay, event);\n            } else {\n                _this.startDrag(event);\n            }\n        };\n        _this.onDragChange = function(event) {\n            // If the gesture was canceled don't respond to the event.\n            if (_this.state.canceled) return; // If the event pointerId doesn't match the initiating pointerId\n            // don't respond to the event.\n            if (event.pointerId !== _this.state._pointerId) return; // If the gesture isn't active then respond to the event only if\n            // it's been delayed via the `delay` option, in which case start\n            // the gesture immediately.\n            if (!_this.state._active) {\n                if (_this.state._delayedEvent) {\n                    _this.clearTimeout();\n                    _this.startDrag(event);\n                }\n                return;\n            }\n            var genericEventData = getGenericEventData(event); // If the event doesn't have any button / touches left we should cancel\n            // the gesture. This may happen if the drag release happens outside the browser\n            // window.\n            if (!genericEventData.down) {\n                _this.onDragEnd(event);\n                return;\n            }\n            _this.updateSharedState(genericEventData);\n            var values = getPointerEventValues(event);\n            var kinematics = _this.getKinematics(values, event);\n            var genericPayload = getGenericPayload(_assertThisInitialized(_this), event); // This verifies if the drag can be assimilated to a tap by checking\n            // if the real distance of the drag (ie not accounting for the threshold) is\n            // greater than the TAP_DISTANCE_THRESHOLD.\n            var _isTap = _this.state._isTap;\n            var realDistance = calculateDistance(kinematics._movement);\n            if (_isTap && realDistance >= TAP_DISTANCE_THRESHOLD) _isTap = false;\n            _this.updateGestureState(_extends({}, genericPayload, kinematics, {\n                _isTap: _isTap\n            }));\n            _this.fireGestureHandler();\n        };\n        _this.onDragEnd = function(event) {\n            // If the event pointerId doesn't match the initiating pointerId\n            // don't respond to the event.\n            if (event.pointerId !== _this.state._pointerId) return;\n            _this.state._active = false;\n            _this.updateSharedState({\n                down: false,\n                buttons: 0,\n                touches: 0\n            });\n            var tap = _this.state._isTap;\n            var _this$state$velocitie = _this.state.velocities, vx = _this$state$velocitie[0], vy = _this$state$velocitie[1];\n            var _this$state$movement = _this.state.movement, mx = _this$state$movement[0], my = _this$state$movement[1];\n            var _this$state$_intentio = _this.state._intentional, ix = _this$state$_intentio[0], iy = _this$state$_intentio[1];\n            var _this$config$swipeVel = _this.config.swipeVelocity, svx = _this$config$swipeVel[0], svy = _this$config$swipeVel[1];\n            var _this$config$swipeDis = _this.config.swipeDistance, sx = _this$config$swipeDis[0], sy = _this$config$swipeDis[1];\n            var endState = _extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values));\n            var swipe = [\n                0,\n                0\n            ];\n            if (endState.elapsedTime < SWIPE_MAX_ELAPSED_TIME) {\n                if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = sign(vx);\n                if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = sign(vy);\n            }\n            _this.updateGestureState(_extends({}, endState, {\n                tap: tap,\n                swipe: swipe\n            }));\n            _this.fireGestureHandler(tap === true);\n        };\n        _this.clean = function() {\n            _CoordinatesRecognize.prototype.clean.call(_assertThisInitialized(_this));\n            _this.state._delayedEvent = false; // can't remember if this is useful?\n            clearWindowListeners(_this.controller, _this.stateKey); // TODO add back when setPointerCapture is widely wupported\n        // this.removePointers()\n        };\n        _this.onCancel = function() {\n            if (_this.state.canceled) return;\n            _this.updateGestureState({\n                canceled: true\n            });\n            _this.state._active = false;\n            _this.updateSharedState({\n                down: false,\n                buttons: 0,\n                touches: 0\n            });\n            requestAnimationFrame(function() {\n                return _this.fireGestureHandler();\n            });\n        };\n        _this.onClick = function(event) {\n            if (!_this.state._isTap) event.stopPropagation();\n        };\n        return _this;\n    }\n    var _proto = DragRecognizer.prototype;\n    _proto.startDrag = function startDrag(event) {\n        var values = getPointerEventValues(event);\n        this.updateSharedState(getGenericEventData(event));\n        this.updateGestureState(_extends({}, getStartGestureState(this, values, event), getGenericPayload(this, event, true), {\n            _pointerId: event.pointerId,\n            cancel: this.onCancel\n        }));\n        this.updateGestureState(this.getMovement(values));\n        this.fireGestureHandler();\n    };\n    _proto.addBindings = function addBindings$1(bindings) {\n        addBindings(bindings, \"onPointerDown\", this.onDragStart);\n        if (this.config.filterTaps) {\n            var handler = this.controller.config.eventOptions.capture ? \"onClick\" : \"onClickCapture\";\n            addBindings(bindings, handler, this.onClick);\n        } // TODO add back when setPointerCapture is widely wupported\n    // addBindings(bindings, 'onPointerMove', this.onDragChange)\n    // addBindings(bindings, 'onPointerUp', this.onDragEnd)\n    // addBindings(bindings, 'onPointerCancel', this.onDragEnd)\n    };\n    return DragRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Inlined from https://github.com/alexreardon/memoize-one\r\n */ function memoizeOne(resultFn, isEqual) {\n    var lastThis;\n    var lastArgs = [];\n    var lastResult;\n    var calledOnce = false;\n    function memoized() {\n        for(var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++){\n            newArgs[_key] = arguments[_key];\n        }\n        if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n            return lastResult;\n        }\n        lastResult = resultFn.apply(this, newArgs);\n        calledOnce = true;\n        lastThis = this;\n        lastArgs = newArgs;\n        return lastResult;\n    }\n    return memoized;\n}\n/**\r\n * Taken from https://github.com/FormidableLabs/react-fast-compare\r\n *\r\n * Dropped comments and ArrayBuffer handling\r\n */ function equal(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        var length, i, keys;\n        if (Array.isArray(a)) {\n            length = a.length;\n            if (length !== b.length) return false;\n            for(i = length; i-- !== 0;){\n                if (!equal(a[i], b[i])) return false;\n            }\n            return true;\n        }\n        var it;\n        if (typeof Map === \"function\" && a instanceof Map && b instanceof Map) {\n            if (a.size !== b.size) return false;\n            it = a.entries();\n            while(!(i = it.next()).done){\n                if (!b.has(i.value[0])) return false;\n            }\n            it = a.entries();\n            while(!(i = it.next()).done){\n                if (!equal(i.value[1], b.get(i.value[0]))) return false;\n            }\n            return true;\n        }\n        if (typeof Set === \"function\" && a instanceof Set && b instanceof Set) {\n            if (a.size !== b.size) return false;\n            it = a.entries();\n            while(!(i = it.next()).done){\n                if (!b.has(i.value[0])) return false;\n            }\n            return true;\n        }\n        if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n        keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;){\n            if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        }\n        if (typeof Element !== \"undefined\" && a instanceof Element) return false;\n        for(i = length; i-- !== 0;){\n            if (keys[i] === \"_owner\" && a.$$typeof) continue;\n            if (!equal(a[keys[i]], b[keys[i]])) return false;\n        }\n        return true;\n    } // true if both NaN, false otherwise — NaN !== NaN → true\n    // eslint-disable-next-line no-self-compare\n    return a !== a && b !== b;\n}\nfunction isEqual(a, b) {\n    try {\n        return equal(a, b);\n    } catch (error) {\n        if ((error.message || \"\").match(/stack|recursion/i)) {\n            console.warn(\"react-fast-compare cannot handle circular refs\");\n            return false;\n        }\n        throw error;\n    }\n}\n/**\r\n * Drag hook.\r\n *\r\n * @param handler - the function fired every time the drag gesture updates\r\n * @param [config={}] - the config object including generic options and drag options\r\n */ function useDrag(handler, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    RecognizersMap.set(\"drag\", DragRecognizer);\n    var buildDragConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!buildDragConfig.current) {\n        buildDragConfig.current = memoizeOne(_buildDragConfig, isEqual);\n    }\n    return useRecognizers({\n        drag: handler\n    }, buildDragConfig.current(config));\n}\n/**\r\n * @private\r\n * Abstract class for distance/angle-based gesture recongizers\r\n */ var DistanceAngleRecognizer = /*#__PURE__*/ function(_Recognizer) {\n    _inheritsLoose(DistanceAngleRecognizer, _Recognizer);\n    function DistanceAngleRecognizer() {\n        return _Recognizer.apply(this, arguments) || this;\n    }\n    var _proto = DistanceAngleRecognizer.prototype;\n    _proto.getInternalMovement = function getInternalMovement(values, state) {\n        var prev_a = state.values[1]; // not be defined if ctrl+wheel is used for zoom only\n        var d = values[0], _values$ = values[1], a = _values$ === void 0 ? prev_a : _values$;\n        var delta_a = a - prev_a;\n        var next_turns = state.turns;\n        if (Math.abs(delta_a) > 270) next_turns += sign(delta_a);\n        return subV([\n            d,\n            a - 360 * next_turns\n        ], state.initial);\n    };\n    _proto.getKinematics = function getKinematics(values, event) {\n        var state = this.getMovement(values);\n        var turns = (values[1] - state.movement[1] - this.state.initial[1]) / 360;\n        var dt = event.timeStamp - this.state.timeStamp;\n        var kinematics = calculateAllKinematics(state.movement, state.delta, dt);\n        return _extends({\n            turns: turns\n        }, state, kinematics);\n    };\n    _proto.mapStateValues = function mapStateValues(state) {\n        return {\n            da: state.values,\n            vdva: state.velocities\n        };\n    };\n    return DistanceAngleRecognizer;\n}(Recognizer);\nvar PinchRecognizer = /*#__PURE__*/ function(_DistanceAngleRecogni) {\n    _inheritsLoose(PinchRecognizer, _DistanceAngleRecogni);\n    function PinchRecognizer() {\n        var _this;\n        _this = _DistanceAngleRecogni.apply(this, arguments) || this;\n        _this.ingKey = \"pinching\";\n        _this.stateKey = \"pinch\";\n        _this.pinchShouldStart = function(event) {\n            var _getGenericEventData = getGenericEventData(event), touches = _getGenericEventData.touches;\n            return _this.enabled && touches === 2;\n        };\n        _this.onPinchStart = function(event) {\n            if (!_this.pinchShouldStart(event)) return;\n            var _getTwoTouchesEventDa = getTwoTouchesEventData(event), values = _getTwoTouchesEventDa.values, origin = _getTwoTouchesEventDa.origin;\n            _this.updateSharedState(getGenericEventData(event));\n            _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n                cancel: _this.onCancel,\n                origin: origin\n            }));\n            _this.updateGestureState(_this.getMovement(values));\n            _this.fireGestureHandler();\n        };\n        _this.onPinchChange = function(event) {\n            var _this$state = _this.state, canceled = _this$state.canceled, _active = _this$state._active;\n            if (canceled || !_active) return;\n            var genericEventData = getGenericEventData(event);\n            _this.updateSharedState(genericEventData);\n            var _getTwoTouchesEventDa2 = getTwoTouchesEventData(event), values = _getTwoTouchesEventDa2.values, origin = _getTwoTouchesEventDa2.origin; // @ts-ignore\n            var kinematics = _this.getKinematics(values, event);\n            _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), kinematics, {\n                origin: origin\n            }));\n            _this.fireGestureHandler();\n        };\n        _this.onPinchEnd = function(event) {\n            if (!_this.state.active) return;\n            _this.state._active = false;\n            _this.updateSharedState({\n                down: false,\n                touches: 0\n            });\n            _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values)));\n            _this.fireGestureHandler();\n        };\n        _this.onCancel = function() {\n            if (_this.state.canceled) return;\n            _this.state._active = false;\n            _this.updateGestureState({\n                canceled: true\n            });\n            _this.updateSharedState({\n                down: false,\n                touches: 0\n            });\n            requestAnimationFrame(function() {\n                return _this.fireGestureHandler();\n            });\n        };\n        /**\r\n     * PINCH WITH WEBKIT GESTURES\r\n     */ _this.onGestureStart = function(event) {\n            if (!_this.enabled) return;\n            event.preventDefault(); // useless\n            var values = getWebkitGestureEventValues(event);\n            _this.updateSharedState(getGenericEventData(event));\n            _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n                origin: [\n                    event.clientX,\n                    event.clientY\n                ],\n                cancel: _this.onCancel\n            }));\n            _this.updateGestureState(_this.getMovement(values));\n            _this.fireGestureHandler();\n        };\n        _this.onGestureChange = function(event) {\n            var _this$state2 = _this.state, canceled = _this$state2.canceled, _active = _this$state2._active;\n            if (canceled || !_active) return;\n            event.preventDefault();\n            var genericEventData = getGenericEventData(event);\n            _this.updateSharedState(genericEventData);\n            var values = getWebkitGestureEventValues(event);\n            var kinematics = _this.getKinematics(values, event);\n            _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), kinematics, {\n                origin: [\n                    event.clientX,\n                    event.clientY\n                ]\n            }));\n            _this.fireGestureHandler();\n        };\n        _this.onGestureEnd = function(event) {\n            event.preventDefault();\n            if (!_this.state.active) return;\n            _this.state._active = false;\n            _this.updateSharedState({\n                down: false,\n                touches: 0\n            });\n            _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getMovement(_this.state.values), {\n                origin: [\n                    event.clientX,\n                    event.clientY\n                ]\n            }));\n            _this.fireGestureHandler();\n        };\n        /**\r\n     * PINCH WITH WHEEL\r\n     */ _this.wheelShouldRun = function(event) {\n            return _this.enabled && event.ctrlKey;\n        };\n        _this.getWheelValuesFromEvent = function(event) {\n            var _getWheelEventValues = getWheelEventValues(event), delta_d = _getWheelEventValues[1];\n            var _this$state$values = _this.state.values, prev_d = _this$state$values[0], prev_a = _this$state$values[1];\n            var d = prev_d - delta_d;\n            var a = prev_a !== void 0 ? prev_a : 0;\n            return {\n                values: [\n                    d,\n                    a\n                ],\n                origin: [\n                    event.clientX,\n                    event.clientY\n                ],\n                delta: [\n                    0,\n                    delta_d\n                ]\n            };\n        };\n        _this.onWheel = function(event) {\n            if (!_this.wheelShouldRun(event)) return;\n            _this.setTimeout(_this.onWheelEnd);\n            if (!_this.state._active) _this.onWheelStart(event);\n            else _this.onWheelChange(event);\n        };\n        _this.onWheelStart = function(event) {\n            var _this$getWheelValuesF = _this.getWheelValuesFromEvent(event), values = _this$getWheelValuesF.values, delta = _this$getWheelValuesF.delta, origin = _this$getWheelValuesF.origin;\n            if (event.cancelable) event.preventDefault();\n            else if (true) {\n                console.warn(\"To properly support zoom on trackpads, try using the `domTarget` option and `config.eventOptions.passive` set to `false`. This message will only appear in development mode.\");\n            }\n            _this.updateSharedState(getGenericEventData(event));\n            _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n                initial: _this.state.values,\n                offset: values,\n                delta: delta,\n                origin: origin\n            }));\n            _this.updateGestureState(_this.getMovement(values));\n            _this.fireGestureHandler();\n        };\n        _this.onWheelChange = function(event) {\n            _this.updateSharedState(getGenericEventData(event));\n            var _this$getWheelValuesF2 = _this.getWheelValuesFromEvent(event), values = _this$getWheelValuesF2.values, origin = _this$getWheelValuesF2.origin, delta = _this$getWheelValuesF2.delta;\n            _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event), {\n                origin: origin,\n                delta: delta\n            }));\n            _this.fireGestureHandler();\n        };\n        _this.onWheelEnd = function() {\n            _this.state._active = false;\n            _this.updateGestureState(_this.getMovement(_this.state.values));\n            _this.fireGestureHandler();\n        };\n        return _this;\n    }\n    var _proto = PinchRecognizer.prototype;\n    _proto.addBindings = function addBindings$1(bindings) {\n        // Only try to use gesture events when they are supported and domTarget is set\n        // as React doesn't support gesture handlers.\n        if (this.controller.config.domTarget && !supportsTouchEvents() && supportsGestureEvents()) {\n            addBindings(bindings, \"onGestureStart\", this.onGestureStart);\n            addBindings(bindings, \"onGestureChange\", this.onGestureChange);\n            addBindings(bindings, \"onGestureEnd\", this.onGestureEnd);\n        } else {\n            addBindings(bindings, \"onTouchStart\", this.onPinchStart);\n            addBindings(bindings, \"onTouchMove\", this.onPinchChange);\n            addBindings(bindings, \"onTouchEnd\", this.onPinchEnd);\n            addBindings(bindings, \"onTouchCancel\", this.onPinchEnd);\n            addBindings(bindings, \"onWheel\", this.onWheel);\n        }\n    };\n    return PinchRecognizer;\n}(DistanceAngleRecognizer);\n/**\r\n * Pinch hook.\r\n *\r\n * @param handler - the function fired every time the pinch gesture updates\r\n * @param [config={}] - the config object including generic options and pinch options\r\n */ function usePinch(handler, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    RecognizersMap.set(\"pinch\", PinchRecognizer);\n    var buildPinchConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!buildPinchConfig.current) {\n        buildPinchConfig.current = memoizeOne(_buildPinchConfig, isEqual);\n    }\n    return useRecognizers({\n        pinch: handler\n    }, buildPinchConfig.current(config));\n}\nvar WheelRecognizer = /*#__PURE__*/ function(_CoordinatesRecognize) {\n    _inheritsLoose(WheelRecognizer, _CoordinatesRecognize);\n    function WheelRecognizer() {\n        var _this;\n        _this = _CoordinatesRecognize.apply(this, arguments) || this;\n        _this.ingKey = \"wheeling\";\n        _this.stateKey = \"wheel\";\n        _this.debounced = true;\n        _this.handleEvent = function(event) {\n            if (event.ctrlKey && \"pinch\" in _this.controller.handlers) return;\n            if (!_this.enabled) return;\n            _this.setTimeout(_this.onEnd);\n            _this.updateSharedState(getGenericEventData(event));\n            var values = addV(getWheelEventValues(event), _this.state.values);\n            if (!_this.state._active) {\n                _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n                    initial: _this.state.values\n                }));\n                var movement = _this.getMovement(values);\n                var geometry = calculateAllGeometry(movement.delta);\n                _this.updateGestureState(movement);\n                _this.updateGestureState(geometry);\n            } else {\n                _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));\n            }\n            _this.fireGestureHandler();\n        };\n        _this.onEnd = function() {\n            var movement = _this.getMovement(_this.state.values);\n            _this.updateGestureState(movement);\n            _this.updateGestureState({\n                _active: false,\n                velocities: [\n                    0,\n                    0\n                ],\n                velocity: 0\n            });\n            _this.fireGestureHandler();\n        };\n        return _this;\n    }\n    var _proto = WheelRecognizer.prototype;\n    _proto.addBindings = function addBindings$1(bindings) {\n        addBindings(bindings, \"onWheel\", this.handleEvent);\n    };\n    return WheelRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Wheel hook.\r\n *\r\n * @param handler - the function fired every time the wheel gesture updates\r\n * @param the config object including generic options and wheel options\r\n */ function useWheel(handler, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    RecognizersMap.set(\"wheel\", WheelRecognizer);\n    var buildWheelConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!buildWheelConfig.current) {\n        buildWheelConfig.current = memoizeOne(_buildWheelConfig, isEqual);\n    }\n    return useRecognizers({\n        wheel: handler\n    }, buildWheelConfig.current(config));\n}\nvar MoveRecognizer = /*#__PURE__*/ function(_CoordinatesRecognize) {\n    _inheritsLoose(MoveRecognizer, _CoordinatesRecognize);\n    function MoveRecognizer() {\n        var _this;\n        _this = _CoordinatesRecognize.apply(this, arguments) || this;\n        _this.ingKey = \"moving\";\n        _this.stateKey = \"move\";\n        _this.debounced = true;\n        _this.onMove = function(event) {\n            if (!_this.enabled) return;\n            _this.setTimeout(_this.onMoveEnd);\n            if (!_this.state._active) _this.onMoveStart(event);\n            else _this.onMoveChange(event);\n        };\n        _this.onMoveStart = function(event) {\n            _this.updateSharedState(getGenericEventData(event));\n            var values = getPointerEventValues(event);\n            _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true)));\n            _this.updateGestureState(_this.getMovement(values));\n            _this.fireGestureHandler();\n        };\n        _this.onMoveChange = function(event) {\n            _this.updateSharedState(getGenericEventData(event));\n            var values = getPointerEventValues(event);\n            _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));\n            _this.fireGestureHandler();\n        };\n        _this.onMoveEnd = function() {\n            var values = _this.state.values;\n            _this.updateGestureState(_this.getMovement(values));\n            _this.updateGestureState({\n                velocities: [\n                    0,\n                    0\n                ],\n                velocity: 0,\n                _active: false\n            });\n            _this.fireGestureHandler();\n        };\n        _this.onPointerEnter = function(event) {\n            _this.controller.state.shared.hovering = true;\n            if (!_this.controller.config.enabled) return;\n            if (_this.controller.config.hover.enabled) {\n                var values = getPointerEventValues(event);\n                var state = _extends({}, _this.controller.state.shared, _this.state, getGenericPayload(_assertThisInitialized(_this), event, true), {\n                    values: values,\n                    active: true,\n                    hovering: true\n                });\n                _this.controller.handlers.hover(_extends({}, state, _this.mapStateValues(state)));\n            }\n            if (\"move\" in _this.controller.handlers) _this.onMoveStart(event);\n        };\n        _this.onPointerLeave = function(event) {\n            _this.controller.state.shared.hovering = false;\n            if (\"move\" in _this.controller.handlers) _this.onMoveEnd();\n            if (!_this.controller.config.hover.enabled) return;\n            var values = getPointerEventValues(event);\n            var state = _extends({}, _this.controller.state.shared, _this.state, getGenericPayload(_assertThisInitialized(_this), event), {\n                values: values,\n                active: false\n            });\n            _this.controller.handlers.hover(_extends({}, state, _this.mapStateValues(state)));\n        };\n        return _this;\n    }\n    var _proto = MoveRecognizer.prototype;\n    _proto.addBindings = function addBindings$1(bindings) {\n        if (\"move\" in this.controller.handlers) {\n            addBindings(bindings, \"onPointerMove\", this.onMove);\n        }\n        if (\"hover\" in this.controller.handlers) {\n            addBindings(bindings, \"onPointerEnter\", this.onPointerEnter);\n            addBindings(bindings, \"onPointerLeave\", this.onPointerLeave);\n        }\n    };\n    return MoveRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Move hook.\r\n *\r\n * @param handler - the function fired every time the move gesture updates\r\n * @param [config={}] - the config object including generic options and move options\r\n */ function useMove(handler, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    RecognizersMap.set(\"move\", MoveRecognizer);\n    var buildMoveConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!buildMoveConfig.current) {\n        buildMoveConfig.current = memoizeOne(_buildMoveConfig, isEqual);\n    }\n    return useRecognizers({\n        move: handler\n    }, buildMoveConfig.current(config));\n}\n/**\r\n * Hover hook.\r\n *\r\n * @param handler - the function fired every time the hover gesture updates\r\n * @param [config={}] - the config object including generic options and hover options\r\n */ function useHover(handler, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    RecognizersMap.set(\"hover\", MoveRecognizer);\n    var buildHoverConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!buildHoverConfig.current) {\n        buildHoverConfig.current = memoizeOne(_buildHoverConfig, isEqual);\n    }\n    return useRecognizers({\n        hover: handler\n    }, buildHoverConfig.current(config));\n}\nvar ScrollRecognizer = /*#__PURE__*/ function(_CoordinatesRecognize) {\n    _inheritsLoose(ScrollRecognizer, _CoordinatesRecognize);\n    function ScrollRecognizer() {\n        var _this;\n        _this = _CoordinatesRecognize.apply(this, arguments) || this;\n        _this.ingKey = \"scrolling\";\n        _this.stateKey = \"scroll\";\n        _this.debounced = true;\n        _this.handleEvent = function(event) {\n            if (!_this.enabled) return;\n            _this.clearTimeout();\n            _this.setTimeout(_this.onEnd);\n            var values = getScrollEventValues(event);\n            _this.updateSharedState(getGenericEventData(event));\n            if (!_this.state._active) {\n                _this.updateGestureState(_extends({}, getStartGestureState(_assertThisInitialized(_this), values, event), getGenericPayload(_assertThisInitialized(_this), event, true), {\n                    initial: _this.state.values\n                }));\n                var movementDetection = _this.getMovement(values);\n                var geometry = calculateAllGeometry(movementDetection.delta);\n                _this.updateGestureState(movementDetection);\n                _this.updateGestureState(geometry);\n            } else {\n                _this.updateGestureState(_extends({}, getGenericPayload(_assertThisInitialized(_this), event), _this.getKinematics(values, event)));\n            }\n            _this.fireGestureHandler();\n        };\n        _this.onEnd = function() {\n            _this.state._active = false;\n            _this.updateGestureState(_extends({}, _this.getMovement(_this.state.values), {\n                velocities: [\n                    0,\n                    0\n                ],\n                velocity: 0\n            }));\n            _this.fireGestureHandler();\n        };\n        return _this;\n    }\n    var _proto = ScrollRecognizer.prototype;\n    _proto.addBindings = function addBindings$1(bindings) {\n        addBindings(bindings, \"onScroll\", this.handleEvent);\n    };\n    return ScrollRecognizer;\n}(CoordinatesRecognizer);\n/**\r\n * Scroll hook.\r\n *\r\n * @param handler - the function fired every time the scroll gesture updates\r\n * @param [config={}] - the config object including generic options and scroll options\r\n */ function useScroll(handler, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    RecognizersMap.set(\"scroll\", ScrollRecognizer);\n    var buildScrollConfig = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    if (!buildScrollConfig.current) {\n        buildScrollConfig.current = memoizeOne(_buildScrollConfig, isEqual);\n    }\n    return useRecognizers({\n        scroll: handler\n    }, buildScrollConfig.current(config));\n}\nvar RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;\nfunction sortHandlers(handlers) {\n    var _native = {};\n    var handle = {};\n    var actions = new Set();\n    for(var key in handlers){\n        if (RE_NOT_NATIVE.test(key)) {\n            actions.add(RegExp.lastMatch);\n            handle[key] = handlers[key];\n        } else {\n            _native[key] = handlers[key];\n        }\n    }\n    return [\n        handle,\n        _native,\n        actions\n    ];\n}\n/**\r\n * @public\r\n *\r\n * The most complete gesture hook, allowing support for multiple gestures.\r\n *\r\n * @param {Handlers} handlers - an object with on[Gesture] keys containg gesture handlers\r\n * @param {UseGestureConfig} [config={}] - the full config object\r\n * @returns {(...args: any[]) => HookReturnType<Config>}\r\n */ function useGesture(_handlers, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    var _sortHandlers = sortHandlers(_handlers), handlers = _sortHandlers[0], nativeHandlers = _sortHandlers[1], actions = _sortHandlers[2];\n    RecognizersMap.set(\"drag\", DragRecognizer);\n    RecognizersMap.set(\"hover\", MoveRecognizer);\n    RecognizersMap.set(\"move\", MoveRecognizer);\n    RecognizersMap.set(\"pinch\", PinchRecognizer);\n    RecognizersMap.set(\"scroll\", ScrollRecognizer);\n    RecognizersMap.set(\"wheel\", WheelRecognizer);\n    var mergedConfig = buildComplexConfig(config, actions);\n    var internalHandlers = {};\n    if (actions.has(\"onDrag\")) internalHandlers.drag = includeStartEndHandlers(handlers, \"onDrag\");\n    if (actions.has(\"onWheel\")) internalHandlers.wheel = includeStartEndHandlers(handlers, \"onWheel\");\n    if (actions.has(\"onScroll\")) internalHandlers.scroll = includeStartEndHandlers(handlers, \"onScroll\");\n    if (actions.has(\"onMove\")) internalHandlers.move = includeStartEndHandlers(handlers, \"onMove\");\n    if (actions.has(\"onPinch\")) internalHandlers.pinch = includeStartEndHandlers(handlers, \"onPinch\");\n    if (actions.has(\"onHover\")) internalHandlers.hover = handlers.onHover;\n    return useRecognizers(internalHandlers, mergedConfig, nativeHandlers);\n}\nfunction includeStartEndHandlers(handlers, handlerKey) {\n    var startKey = handlerKey + \"Start\";\n    var endKey = handlerKey + \"End\";\n    var fn = function fn(state) {\n        var memo = undefined;\n        if (state.first && startKey in handlers) handlers[startKey](state);\n        if (handlerKey in handlers) memo = handlers[handlerKey](state);\n        if (state.last && endKey in handlers) handlers[endKey](state);\n        return memo;\n    };\n    return fn;\n}\n //# sourceMappingURL=react-use-gesture.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-use-gesture/dist/react-use-gesture.esm.js\n");

/***/ })

};
;