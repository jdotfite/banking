"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/focus-trap";
exports.ids = ["vendor-chunks/focus-trap"];
exports.modules = {

/***/ "(ssr)/./node_modules/focus-trap/dist/focus-trap.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/focus-trap/dist/focus-trap.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFocusTrap: () => (/* binding */ createFocusTrap)\n/* harmony export */ });\n/* harmony import */ var tabbable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tabbable */ \"(ssr)/./node_modules/tabbable/dist/index.esm.js\");\n/*!\n* focus-trap 6.9.4\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/ \nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar activeFocusTraps = function() {\n    var trapQueue = [];\n    return {\n        activateTrap: function activateTrap(trap) {\n            if (trapQueue.length > 0) {\n                var activeTrap = trapQueue[trapQueue.length - 1];\n                if (activeTrap !== trap) {\n                    activeTrap.pause();\n                }\n            }\n            var trapIndex = trapQueue.indexOf(trap);\n            if (trapIndex === -1) {\n                trapQueue.push(trap);\n            } else {\n                // move this existing trap to the front of the queue\n                trapQueue.splice(trapIndex, 1);\n                trapQueue.push(trap);\n            }\n        },\n        deactivateTrap: function deactivateTrap(trap) {\n            var trapIndex = trapQueue.indexOf(trap);\n            if (trapIndex !== -1) {\n                trapQueue.splice(trapIndex, 1);\n            }\n            if (trapQueue.length > 0) {\n                trapQueue[trapQueue.length - 1].unpause();\n            }\n        }\n    };\n}();\nvar isSelectableInput = function isSelectableInput(node) {\n    return node.tagName && node.tagName.toLowerCase() === \"input\" && typeof node.select === \"function\";\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n    return e.key === \"Escape\" || e.key === \"Esc\" || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n    return e.key === \"Tab\" || e.keyCode === 9;\n};\nvar delay = function delay(fn) {\n    return setTimeout(fn, 0);\n}; // Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n    var idx = -1;\n    arr.every(function(value, i) {\n        if (fn(value)) {\n            idx = i;\n            return false; // break\n        }\n        return true; // next\n    });\n    return idx;\n};\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */ var valueOrHandler = function valueOrHandler(value) {\n    for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        params[_key - 1] = arguments[_key];\n    }\n    return typeof value === \"function\" ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n    // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n    //  shadow host. However, event.target.composedPath() will be an array of\n    //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n    //  outer-most (the host HTML document). If we have access to composedPath(),\n    //  then use its first element; otherwise, fall back to event.target (and\n    //  this only works for an _open_ shadow DOM; otherwise,\n    //  composedPath()[0] === event.target always).\n    return event.target.shadowRoot && typeof event.composedPath === \"function\" ? event.composedPath()[0] : event.target;\n};\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n    // SSR: a live trap shouldn't be created in this type of environment so this\n    //  should be safe code to execute if the `document` option isn't specified\n    var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n    var config = _objectSpread2({\n        returnFocusOnDeactivate: true,\n        escapeDeactivates: true,\n        delayInitialFocus: true\n    }, userOptions);\n    var state = {\n        // containers given to createFocusTrap()\n        // @type {Array<HTMLElement>}\n        containers: [],\n        // list of objects identifying tabbable nodes in `containers` in the trap\n        // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n        //  is active, but the trap should never get to a state where there isn't at least one group\n        //  with at least one tabbable node in it (that would lead to an error condition that would\n        //  result in an error being thrown)\n        // @type {Array<{\n        //   container: HTMLElement,\n        //   tabbableNodes: Array<HTMLElement>, // empty if none\n        //   focusableNodes: Array<HTMLElement>, // empty if none\n        //   firstTabbableNode: HTMLElement|null,\n        //   lastTabbableNode: HTMLElement|null,\n        //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n        // }>}\n        containerGroups: [],\n        // same order/length as `containers` list\n        // references to objects in `containerGroups`, but only those that actually have\n        //  tabbable nodes in them\n        // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n        //  the same length\n        tabbableGroups: [],\n        nodeFocusedBeforeActivation: null,\n        mostRecentlyFocusedNode: null,\n        active: false,\n        paused: false,\n        // timer ID for when delayInitialFocus is true and initial focus in this trap\n        //  has been delayed during activation\n        delayInitialFocusTimer: undefined\n    };\n    var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n    /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */ var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n        return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n    };\n    /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */ var findContainerIndex = function findContainerIndex(element) {\n        // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n        //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n        //  and we still need to find the element in there\n        return state.containerGroups.findIndex(function(_ref) {\n            var container = _ref.container, tabbableNodes = _ref.tabbableNodes;\n            return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any\n            //  web components if the `tabbableOptions.getShadowRoot` option was used for\n            //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n            //  look inside web components even if open)\n            tabbableNodes.find(function(node) {\n                return node === element;\n            });\n        });\n    };\n    /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */ var getNodeForOption = function getNodeForOption(optionName) {\n        var optionValue = config[optionName];\n        if (typeof optionValue === \"function\") {\n            for(var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                params[_key2 - 1] = arguments[_key2];\n            }\n            optionValue = optionValue.apply(void 0, params);\n        }\n        if (optionValue === true) {\n            optionValue = undefined; // use default value\n        }\n        if (!optionValue) {\n            if (optionValue === undefined || optionValue === false) {\n                return optionValue;\n            } // else, empty string (invalid), null (invalid), 0 (invalid)\n            throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n        }\n        var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n        if (typeof optionValue === \"string\") {\n            node = doc.querySelector(optionValue); // resolve to node, or null if fails\n            if (!node) {\n                throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n            }\n        }\n        return node;\n    };\n    var getInitialFocusNode = function getInitialFocusNode() {\n        var node = getNodeForOption(\"initialFocus\"); // false explicitly indicates we want no initialFocus at all\n        if (node === false) {\n            return false;\n        }\n        if (node === undefined) {\n            // option not specified: use fallback options\n            if (findContainerIndex(doc.activeElement) >= 0) {\n                node = doc.activeElement;\n            } else {\n                var firstTabbableGroup = state.tabbableGroups[0];\n                var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode; // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n                node = firstTabbableNode || getNodeForOption(\"fallbackFocus\");\n            }\n        }\n        if (!node) {\n            throw new Error(\"Your focus-trap needs to have at least one focusable element\");\n        }\n        return node;\n    };\n    var updateTabbableNodes = function updateTabbableNodes() {\n        state.containerGroups = state.containers.map(function(container) {\n            var tabbableNodes = (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.tabbable)(container, config.tabbableOptions); // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n            //  are a superset of tabbable nodes\n            var focusableNodes = (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.focusable)(container, config.tabbableOptions);\n            return {\n                container: container,\n                tabbableNodes: tabbableNodes,\n                focusableNodes: focusableNodes,\n                firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n                lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n                /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */ nextTabbableNode: function nextTabbableNode(node) {\n                    var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                    // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n                    //  from the DOM order), this __will not work__ because the list of focusableNodes,\n                    //  while it contains tabbable nodes, does not sort its nodes in any order other\n                    //  than DOM order, because it can't: Where would you place focusable (but not\n                    //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n                    // Support for positive tabindex is already broken and hard to manage (possibly\n                    //  not supportable, TBD), so this isn't going to make things worse than they\n                    //  already are, and at least makes things better for the majority of cases where\n                    //  tabindex is either 0/unset or negative.\n                    // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n                    var nodeIdx = focusableNodes.findIndex(function(n) {\n                        return n === node;\n                    });\n                    if (nodeIdx < 0) {\n                        return undefined;\n                    }\n                    if (forward) {\n                        return focusableNodes.slice(nodeIdx + 1).find(function(n) {\n                            return (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(n, config.tabbableOptions);\n                        });\n                    }\n                    return focusableNodes.slice(0, nodeIdx).reverse().find(function(n) {\n                        return (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(n, config.tabbableOptions);\n                    });\n                }\n            };\n        });\n        state.tabbableGroups = state.containerGroups.filter(function(group) {\n            return group.tabbableNodes.length > 0;\n        }); // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n        if (state.tabbableGroups.length <= 0 && !getNodeForOption(\"fallbackFocus\") // returning false not supported for this option\n        ) {\n            throw new Error(\"Your focus-trap must have at least one container with at least one tabbable node in it at all times\");\n        }\n    };\n    var tryFocus = function tryFocus(node) {\n        if (node === false) {\n            return;\n        }\n        if (node === doc.activeElement) {\n            return;\n        }\n        if (!node || !node.focus) {\n            tryFocus(getInitialFocusNode());\n            return;\n        }\n        node.focus({\n            preventScroll: !!config.preventScroll\n        });\n        state.mostRecentlyFocusedNode = node;\n        if (isSelectableInput(node)) {\n            node.select();\n        }\n    };\n    var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n        var node = getNodeForOption(\"setReturnFocus\", previousActiveElement);\n        return node ? node : node === false ? false : previousActiveElement;\n    }; // This needs to be done on mousedown and touchstart instead of click\n    // so that it precedes the focus event.\n    var checkPointerDown = function checkPointerDown(e) {\n        var target = getActualTarget(e);\n        if (findContainerIndex(target) >= 0) {\n            // allow the click since it ocurred inside the trap\n            return;\n        }\n        if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n            // immediately deactivate the trap\n            trap.deactivate({\n                // if, on deactivation, we should return focus to the node originally-focused\n                //  when the trap was activated (or the configured `setReturnFocus` node),\n                //  then assume it's also OK to return focus to the outside node that was\n                //  just clicked, causing deactivation, as long as that node is focusable;\n                //  if it isn't focusable, then return focus to the original node focused\n                //  on activation (or the configured `setReturnFocus` node)\n                // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n                //  which will result in the outside click setting focus to the node\n                //  that was clicked, whether it's focusable or not; by setting\n                //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n                //  on activation (or the configured `setReturnFocus` node)\n                returnFocus: config.returnFocusOnDeactivate && !(0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isFocusable)(target, config.tabbableOptions)\n            });\n            return;\n        } // This is needed for mobile devices.\n        // (If we'll only let `click` events through,\n        // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n        if (valueOrHandler(config.allowOutsideClick, e)) {\n            // allow the click outside the trap to take place\n            return;\n        } // otherwise, prevent the click\n        e.preventDefault();\n    }; // In case focus escapes the trap for some strange reason, pull it back in.\n    var checkFocusIn = function checkFocusIn(e) {\n        var target = getActualTarget(e);\n        var targetContained = findContainerIndex(target) >= 0; // In Firefox when you Tab out of an iframe the Document is briefly focused.\n        if (targetContained || target instanceof Document) {\n            if (targetContained) {\n                state.mostRecentlyFocusedNode = target;\n            }\n        } else {\n            // escaped! pull it back in to where it just left\n            e.stopImmediatePropagation();\n            tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n        }\n    }; // Hijack Tab events on the first and last focusable nodes of the trap,\n    // in order to prevent focus from escaping. If it escapes for even a\n    // moment it can end up scrolling the page and causing confusion so we\n    // kind of need to capture the action at the keydown phase.\n    var checkTab = function checkTab(e) {\n        var target = getActualTarget(e);\n        updateTabbableNodes();\n        var destinationNode = null;\n        if (state.tabbableGroups.length > 0) {\n            // make sure the target is actually contained in a group\n            // NOTE: the target may also be the container itself if it's focusable\n            //  with tabIndex='-1' and was given initial focus\n            var containerIndex = findContainerIndex(target);\n            var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n            if (containerIndex < 0) {\n                // target not found in any group: quite possible focus has escaped the trap,\n                //  so bring it back in to...\n                if (e.shiftKey) {\n                    // ...the last node in the last group\n                    destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n                } else {\n                    // ...the first node in the first group\n                    destinationNode = state.tabbableGroups[0].firstTabbableNode;\n                }\n            } else if (e.shiftKey) {\n                // REVERSE\n                // is the target the first tabbable node in a group?\n                var startOfGroupIndex = findIndex(state.tabbableGroups, function(_ref2) {\n                    var firstTabbableNode = _ref2.firstTabbableNode;\n                    return target === firstTabbableNode;\n                });\n                if (startOfGroupIndex < 0 && (containerGroup.container === target || (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isFocusable)(target, config.tabbableOptions) && !(0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n                    // an exception case where the target is either the container itself, or\n                    //  a non-tabbable node that was given focus (i.e. tabindex is negative\n                    //  and user clicked on it or node was programmatically given focus)\n                    //  and is not followed by any other tabbable node, in which\n                    //  case, we should handle shift+tab as if focus were on the container's\n                    //  first tabbable node, and go to the last tabbable node of the LAST group\n                    startOfGroupIndex = containerIndex;\n                }\n                if (startOfGroupIndex >= 0) {\n                    // YES: then shift+tab should go to the last tabbable node in the\n                    //  previous group (and wrap around to the last tabbable node of\n                    //  the LAST group if it's the first tabbable node of the FIRST group)\n                    var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n                    var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n                    destinationNode = destinationGroup.lastTabbableNode;\n                }\n            } else {\n                // FORWARD\n                // is the target the last tabbable node in a group?\n                var lastOfGroupIndex = findIndex(state.tabbableGroups, function(_ref3) {\n                    var lastTabbableNode = _ref3.lastTabbableNode;\n                    return target === lastTabbableNode;\n                });\n                if (lastOfGroupIndex < 0 && (containerGroup.container === target || (0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isFocusable)(target, config.tabbableOptions) && !(0,tabbable__WEBPACK_IMPORTED_MODULE_0__.isTabbable)(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n                    // an exception case where the target is the container itself, or\n                    //  a non-tabbable node that was given focus (i.e. tabindex is negative\n                    //  and user clicked on it or node was programmatically given focus)\n                    //  and is not followed by any other tabbable node, in which\n                    //  case, we should handle tab as if focus were on the container's\n                    //  last tabbable node, and go to the first tabbable node of the FIRST group\n                    lastOfGroupIndex = containerIndex;\n                }\n                if (lastOfGroupIndex >= 0) {\n                    // YES: then tab should go to the first tabbable node in the next\n                    //  group (and wrap around to the first tabbable node of the FIRST\n                    //  group if it's the last tabbable node of the LAST group)\n                    var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n                    var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n                    destinationNode = _destinationGroup.firstTabbableNode;\n                }\n            }\n        } else {\n            // NOTE: the fallbackFocus option does not support returning false to opt-out\n            destinationNode = getNodeForOption(\"fallbackFocus\");\n        }\n        if (destinationNode) {\n            e.preventDefault();\n            tryFocus(destinationNode);\n        } // else, let the browser take care of [shift+]tab and move the focus\n    };\n    var checkKey = function checkKey(e) {\n        if (isEscapeEvent(e) && valueOrHandler(config.escapeDeactivates, e) !== false) {\n            e.preventDefault();\n            trap.deactivate();\n            return;\n        }\n        if (isTabEvent(e)) {\n            checkTab(e);\n            return;\n        }\n    };\n    var checkClick = function checkClick(e) {\n        var target = getActualTarget(e);\n        if (findContainerIndex(target) >= 0) {\n            return;\n        }\n        if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n            return;\n        }\n        if (valueOrHandler(config.allowOutsideClick, e)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopImmediatePropagation();\n    }; //\n    // EVENT LISTENERS\n    //\n    var addListeners = function addListeners() {\n        if (!state.active) {\n            return;\n        } // There can be only one listening focus trap at a time\n        activeFocusTraps.activateTrap(trap); // Delay ensures that the focused element doesn't capture the event\n        // that caused the focus trap activation.\n        state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function() {\n            tryFocus(getInitialFocusNode());\n        }) : tryFocus(getInitialFocusNode());\n        doc.addEventListener(\"focusin\", checkFocusIn, true);\n        doc.addEventListener(\"mousedown\", checkPointerDown, {\n            capture: true,\n            passive: false\n        });\n        doc.addEventListener(\"touchstart\", checkPointerDown, {\n            capture: true,\n            passive: false\n        });\n        doc.addEventListener(\"click\", checkClick, {\n            capture: true,\n            passive: false\n        });\n        doc.addEventListener(\"keydown\", checkKey, {\n            capture: true,\n            passive: false\n        });\n        return trap;\n    };\n    var removeListeners = function removeListeners() {\n        if (!state.active) {\n            return;\n        }\n        doc.removeEventListener(\"focusin\", checkFocusIn, true);\n        doc.removeEventListener(\"mousedown\", checkPointerDown, true);\n        doc.removeEventListener(\"touchstart\", checkPointerDown, true);\n        doc.removeEventListener(\"click\", checkClick, true);\n        doc.removeEventListener(\"keydown\", checkKey, true);\n        return trap;\n    }; //\n    // TRAP DEFINITION\n    //\n    trap = {\n        get active () {\n            return state.active;\n        },\n        get paused () {\n            return state.paused;\n        },\n        activate: function activate(activateOptions) {\n            if (state.active) {\n                return this;\n            }\n            var onActivate = getOption(activateOptions, \"onActivate\");\n            var onPostActivate = getOption(activateOptions, \"onPostActivate\");\n            var checkCanFocusTrap = getOption(activateOptions, \"checkCanFocusTrap\");\n            if (!checkCanFocusTrap) {\n                updateTabbableNodes();\n            }\n            state.active = true;\n            state.paused = false;\n            state.nodeFocusedBeforeActivation = doc.activeElement;\n            if (onActivate) {\n                onActivate();\n            }\n            var finishActivation = function finishActivation() {\n                if (checkCanFocusTrap) {\n                    updateTabbableNodes();\n                }\n                addListeners();\n                if (onPostActivate) {\n                    onPostActivate();\n                }\n            };\n            if (checkCanFocusTrap) {\n                checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n                return this;\n            }\n            finishActivation();\n            return this;\n        },\n        deactivate: function deactivate(deactivateOptions) {\n            if (!state.active) {\n                return this;\n            }\n            var options = _objectSpread2({\n                onDeactivate: config.onDeactivate,\n                onPostDeactivate: config.onPostDeactivate,\n                checkCanReturnFocus: config.checkCanReturnFocus\n            }, deactivateOptions);\n            clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n            state.delayInitialFocusTimer = undefined;\n            removeListeners();\n            state.active = false;\n            state.paused = false;\n            activeFocusTraps.deactivateTrap(trap);\n            var onDeactivate = getOption(options, \"onDeactivate\");\n            var onPostDeactivate = getOption(options, \"onPostDeactivate\");\n            var checkCanReturnFocus = getOption(options, \"checkCanReturnFocus\");\n            var returnFocus = getOption(options, \"returnFocus\", \"returnFocusOnDeactivate\");\n            if (onDeactivate) {\n                onDeactivate();\n            }\n            var finishDeactivation = function finishDeactivation() {\n                delay(function() {\n                    if (returnFocus) {\n                        tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n                    }\n                    if (onPostDeactivate) {\n                        onPostDeactivate();\n                    }\n                });\n            };\n            if (returnFocus && checkCanReturnFocus) {\n                checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n                return this;\n            }\n            finishDeactivation();\n            return this;\n        },\n        pause: function pause() {\n            if (state.paused || !state.active) {\n                return this;\n            }\n            state.paused = true;\n            removeListeners();\n            return this;\n        },\n        unpause: function unpause() {\n            if (!state.paused || !state.active) {\n                return this;\n            }\n            state.paused = false;\n            updateTabbableNodes();\n            addListeners();\n            return this;\n        },\n        updateContainerElements: function updateContainerElements(containerElements) {\n            var elementsAsArray = [].concat(containerElements).filter(Boolean);\n            state.containers = elementsAsArray.map(function(element) {\n                return typeof element === \"string\" ? doc.querySelector(element) : element;\n            });\n            if (state.active) {\n                updateTabbableNodes();\n            }\n            return this;\n        }\n    }; // initialize container elements\n    trap.updateContainerElements(elements);\n    return trap;\n};\n //# sourceMappingURL=focus-trap.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/focus-trap/dist/focus-trap.esm.js\n");

/***/ })

};
;